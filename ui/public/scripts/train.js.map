{
  "version": 3,
  "sources": ["../../src/scripts/pieceIndices.ts", "../../src/scripts/common/rand.ts", "../../src/scripts/util.ts", "../../src/scripts/scene.ts", "../../src/scripts/ui.ts", "../../src/scripts/store.ts", "../../src/scripts/slide.ts", "../../src/scripts/train.ts"],
  "sourcesContent": ["export const CENTERS = [4, 13, 22, 31, 40, 49];\r\nexport const UBL = [0, 29, 36];\r\nexport const URB = [6, 35, 51];\r\nexport const ULF = [2, 9, 42];\r\nexport const UFR = [8, 15, 45];\r\nexport const DFL = [18, 11, 44];\r\nexport const DRF = [24, 47, 17];\r\nexport const DLB = [20, 38, 27];\r\nexport const DBR = [26, 33, 53];\r\nexport const UB = [3, 32];\r\nexport const UL = [1, 39];\r\nexport const UR = [7, 48];\r\nexport const UF = [5, 12];\r\nexport const FL = [10, 43];\r\nexport const FR = [16, 46];\r\nexport const DF = [21, 14];\r\nexport const DL = [19, 41];\r\nexport const DR = [25, 50];\r\nexport const DB = [23, 30];\r\nexport const BL = [28, 37];\r\nexport const BR = [34, 52];\r\nexport const layer1Corners = [...UBL, ...URB, ...ULF, ...UFR];\r\nexport const layer2Corners = [...DFL, ...DRF, ...DLB, ...DBR];\r\nexport const layer1Edges = [...UB, ...UL, ...UR, ...UF];\r\nexport const layer2Edges = [...FL, ...FR, ...BL, ...BR];\r\nexport const layer3Edges = [...DF, ...DL, ...DR, ...DB];\r\nexport const cross = [...CENTERS, ...layer1Edges];\r\nexport const firstLayer = [...cross, ...layer1Corners];\r\nexport const f2l = [...firstLayer, ...layer2Edges];\r\nexport const lastLayer = [...layer3Edges, ...layer2Corners];\r\nexport const allPieces = [...f2l, ...lastLayer];", "/**\r\n * Returns a random integer in the range [0, int)\r\n */\r\nexport function randInt(int: number) {\r\n    return Math.floor(Math.random() * int);\r\n}", "import { randInt } from \"./common/rand\";\r\n\r\n/**\r\n * Fisher-Yates shuffle: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n * \r\n * Mutates original array and returns the shuffled array\r\n * \r\n * @param array \r\n * @returns shuffled array\r\n */\r\nexport function shuffle(array: any[]) {\r\n    let i = array.length;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (i != 0) {\r\n\r\n        // Pick a remaining element...\r\n        let r = randInt(i);\r\n        i--;\r\n\r\n        // And swap it with the current element.\r\n        let temp = array[r];\r\n        array[r] = array[i];\r\n        array[i] = temp;\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\n/**\r\n * Series produces 2, 5, 9, 14, 20, 27, 35, 44, 54, 65, 77, 80...\r\n */\r\n export function series(n: number) {\r\n    if (n <= 0) {\r\n        return 2;\r\n    }\r\n    return series(n - 1) + n + 2;\r\n}\r\n\r\ntype TrainingElement = {\r\n    alg: any\r\n    score: number,\r\n}\r\n\r\n/** Mutate algs in place */\r\nexport function promoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score++;\r\n    let position = series(algs[0].score);\r\n    const threeFourths = Math.ceil(algs.length * 3 / 4);\r\n    if (position > threeFourths) {\r\n        position = threeFourths + randInt(algs.length - threeFourths);\r\n    }\r\n    move(algs, position);\r\n}\r\n\r\nexport function demoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score = 0;\r\n    move(algs, series(0));\r\n}\r\n\r\n/** Move the first element of arr to position n. Mutate arr in place */\r\nfunction move(arr: Array<any>, n: number) {\r\n    const temp = arr[0];\r\n    for (let i = 0; i < n; i++) {\r\n        arr[i] = arr[i + 1];\r\n    }\r\n    arr[n] = temp;\r\n}", "import { BufferObject, createBuffers } from \"./buffers\";\r\nimport { Spring } from \"./common/spring\";\r\nimport { CubeLogic } from \"./cube\";\r\nimport { DragDetector } from \"./dragDetector\";\r\nimport * as glMat from \"./glMatrix\";\r\nimport * as store from \"./store\";\r\n\r\nlet canvas: HTMLCanvasElement = document.querySelector(\"canvas\");\r\nlet gl: WebGLRenderingContext = canvas.getContext(\"webgl\");\r\n\r\ntype ProgramInfo = {\r\n    attribLocations: {\r\n        vertexPosition: number,\r\n        vertexColor: number,\r\n    },\r\n    uniformLocations: {\r\n        transformMatrix: WebGLUniformLocation,\r\n    },\r\n};\r\n\r\nlet programInfo: ProgramInfo = initPrograms();\r\n\r\nexport type Scene = {\r\n    div: HTMLElement,\r\n    cube: CubeLogic,\r\n    spring: Spring,\r\n    buffers: BufferObject[],\r\n    transformMatrix: number[],\r\n};\r\nexport let scenes: Scene[] = [];\r\n\r\nexport let settings = {\r\n    sizeMultiplier: 1,\r\n    hintStickers: true,\r\n    showBody: true,\r\n    animateTurns: true,\r\n}\r\n\r\nlet time: number = Date.now() * 0.001;\r\n\r\nlet prefsLoaded = false;\r\nlet numLayers: number = 3;\r\nlet dragEnabled = true;\r\n\r\nlet loopStarted = false;\r\nexport function startLoop() {\r\n    if (loopStarted) return;\r\n    loopStarted = true;\r\n    requestAnimationFrame(render);\r\n}\r\n\r\nfunction loadPrefs() {\r\n    // if (prefsLoaded) return;\r\n    // prefsLoaded = true;\r\n    // sizeMultiplier = store.getSize();\r\n    // hintStickers = store.getHintStickers();\r\n    // showBody = store.getShowBody();\r\n    // animateTurns = store.getAnimateTurns();\r\n}\r\n\r\nexport function setNumLayers(val: number) {\r\n    numLayers = val;\r\n}\r\n\r\nexport function setDragEnabled(val: boolean) {\r\n    dragEnabled = val;\r\n}\r\n\r\nexport function newScene(selector: string): Scene {\r\n    let div = document.querySelector(selector) as HTMLElement;\r\n    let cube = new CubeLogic(gl, true);\r\n    let spring = new Spring();\r\n    let transformMatrix = initTransform(div);\r\n    let dragDetector = new DragDetector();\r\n    \r\n    cube.setNumOfLayers(numLayers);\r\n    cube.new();\r\n\r\n    let buffers = createBuffers(gl, cube, true, transformMatrix);\r\n\r\n    const pointerdown = (offsetX, offsetY) => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerDown(offsetX, offsetY, div, cube, buffers);\r\n    }\r\n\r\n    const pointermove = (offsetX, offsetY) => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerMove(offsetX, offsetY);\r\n    }\r\n\r\n    const pointerup = () => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerUp(div, cube, buffers);\r\n    }\r\n\r\n    const calcOffset = (event) => {\r\n        const rect = event.target.getBoundingClientRect();\r\n        const x = event.touches[0].pageX - rect.left;\r\n        const y = event.touches[0].pageY - rect.top;\r\n        return { x, y };\r\n    }\r\n\r\n    const addPointerListeners = () => {\r\n        div.addEventListener(\"pointerdown\", event => pointerdown(event.offsetX, event.offsetY));\r\n        div.addEventListener(\"pointermove\", event => pointermove(event.offsetX, event.offsetY));\r\n        div.addEventListener(\"pointerup\", event => pointerup());\r\n    }\r\n\r\n    const addTouchListeners = () => {\r\n        div.addEventListener(\"touchstart\", event => {\r\n            const { x, y } = calcOffset(event);\r\n            pointerdown(x, y);\r\n        });\r\n        div.addEventListener(\"touchmove\", event => {\r\n            const { x, y } = calcOffset(event);\r\n            pointermove(x, y);\r\n        });\r\n        div.addEventListener(\"touchend\", event => {\r\n            pointerup();\r\n        });\r\n    }\r\n\r\n    if (window.PointerEvent) {\r\n        addPointerListeners();\r\n    } else {\r\n        addTouchListeners();\r\n    }\r\n\r\n    return {\r\n        div,\r\n        cube,\r\n        spring,\r\n        buffers,\r\n        transformMatrix,\r\n    };\r\n}\r\n\r\nfunction initPrograms() {\r\n    const vertexShaderSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n    uniform mat4 uTransformMatrix;\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_Position = uTransformMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n    }\r\n    `;\r\n\r\n    const fragmentShaderSource = `\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_FragColor = vColor;\r\n    }\r\n    `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\r\n\r\n    gl.useProgram(shaderProgram);\r\n\r\n    return {\r\n        attribLocations: {\r\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n            vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor'),\r\n        },\r\n        uniformLocations: {\r\n            transformMatrix: gl.getUniformLocation(shaderProgram, 'uTransformMatrix'),\r\n        }\r\n    }\r\n}\r\n\r\nfunction initTransform(element: HTMLElement) {\r\n    let transformMatrix = glMat.create();\r\n\r\n    glMat.perspective(transformMatrix,\r\n        50 * Math.PI / 180, // field of view\r\n        element.clientWidth / element.clientHeight, // aspect\r\n        0.1, // z near\r\n        100.0); // z far\r\n\r\n    glMat.translate(transformMatrix,\r\n        [0.0, 0.0, -5.0]);\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        45 * Math.PI / 180,\r\n        [1, 0, 0],\r\n    );\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        0,\r\n        [0, -1, 0],\r\n    );\r\n\r\n    return transformMatrix;\r\n}\r\n\r\nfunction bindPosition(positionBuffer: WebGLBuffer, programInfo: ProgramInfo, gl: WebGLRenderingContext) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        3, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n}\r\n\r\nfunction bindColor(colorBuffer: WebGLBuffer, programInfo: ProgramInfo, gl: WebGLRenderingContext) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        4, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n}\r\n\r\nfunction drawElements(gl: WebGLRenderingContext) {\r\n    gl.drawElements(\r\n        gl.TRIANGLES,\r\n        6,\r\n        gl.UNSIGNED_SHORT, // type\r\n        0, // offset\r\n    );\r\n}\r\n\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n// Creates a shader of the given type, uploads the source and compiles it.\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize() {\r\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n    const displayWidth = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width !== displayWidth ||\r\n        canvas.height !== displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n    }\r\n\r\n    return needResize;\r\n}\r\n\r\nfunction render(newTime: number) {\r\n    newTime *= 0.001; // convert to seconds\r\n    const dt = newTime - time;\r\n    time = newTime;\r\n\r\n    resizeCanvasToDisplaySize();\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.SCISSOR_TEST);\r\n    gl.depthFunc(gl.LEQUAL); // Near things obscure far things\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // move the canvas to top of the current scroll position\r\n    canvas.style.transform = `translateY(${window.scrollY}px)`;\r\n\r\n    for (let i = 0; i < scenes.length; i++) {\r\n        const { cube, div, spring, buffers, transformMatrix } = scenes[i];\r\n\r\n        const rect = div.getBoundingClientRect();\r\n        if (rect.bottom < 0 || rect.top > canvas.clientHeight ||\r\n            rect.right < 0 || rect.left > canvas.clientWidth) {\r\n            continue;  // it's off screen\r\n        }\r\n\r\n        const width = rect.right - rect.left;\r\n        const height = rect.bottom - rect.top;\r\n        const left = rect.left;\r\n        const bottom = canvas.clientHeight - rect.bottom;\r\n\r\n        gl.viewport(left, bottom, width, height);\r\n        gl.scissor(left, bottom, width, height);\r\n\r\n        if (cube.animationQueue[0]) {\r\n            // target is measured in degrees\r\n            spring.target = cube.animationQueue.length * 90;\r\n            spring.update(dt);\r\n\r\n            if (spring.position >= 90) {\r\n                cube.affectedStickers = Array(cube.numOfStickers).fill(false);\r\n\r\n                cube.commitStickers();\r\n                spring.position = 0;\r\n                cube.animationQueue.shift();\r\n            }\r\n        }\r\n\r\n        const animation = cube.animationQueue[0];\r\n        let listToShow = animation ? animation.stickers : cube.stickers;\r\n\r\n        for (let i = 0; i < cube.numOfStickers; i++) {\r\n            let object = buffers[i];\r\n\r\n            const m = (animation && animation.stickersToAnimate[i])\r\n                ? glMat.rotate(\r\n                    glMat.create(),\r\n                    transformMatrix,\r\n                    spring.position * Math.PI / 180,\r\n                    animation.axis\r\n                )\r\n                : transformMatrix;\r\n\r\n            gl.uniformMatrix4fv(\r\n                programInfo.uniformLocations.transformMatrix,\r\n                false,\r\n                m,\r\n            );\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\r\n\r\n            if (settings.showBody) {\r\n                bindPosition(object.noGapPositionBuffer, programInfo, gl);\r\n                bindColor(cube.underStickers[i].buffer, programInfo, gl);\r\n                drawElements(gl);\r\n            }\r\n\r\n            bindPosition(object.positionBuffer, programInfo, gl);\r\n            bindColor(listToShow[i].buffer, programInfo, gl);\r\n            drawElements(gl);\r\n        }\r\n\r\n        if (!settings.hintStickers) return;\r\n        \r\n        renderHintStickers(cube, buffers, transformMatrix, listToShow);\r\n    }\r\n\r\n    requestAnimationFrame(render);\r\n}\r\n\r\nfunction renderHintStickers(cube: CubeLogic, buffers: BufferObject[], transformMatrix: number[], listToShow: any[]) {\r\n    gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.transformMatrix,\r\n        false,\r\n        transformMatrix,\r\n    );\r\n\r\n    for (let j = 2 * cube.layersSq; j < cube.numOfStickers; j++) {\r\n        let object = buffers[j];\r\n\r\n        bindPosition(object.hintPositionBuffer, programInfo, gl);\r\n        bindColor(listToShow[j].buffer, programInfo, gl);\r\n        drawElements(gl);\r\n    }\r\n}\r\n\r\nfunction renderZeroEasterEgg() {\r\n    const glDiv = document.querySelector(\"#glDiv\");\r\n    glDiv.innerHTML = `\r\n    <div style=\"display: flex; justify-content: center; align-items: center; width: 320px; height: 320px;\">\r\n        <p style=\"color: white; text-align: center;\">You can try to solve a 0-layer cube, but that's kinda boring...</p>\r\n    </div>\r\n    `;\r\n}", "export function addListenersForLeftModal() {\r\n    const drawer = document.querySelector(\".slideRight\");\r\n    let isOpen = false;\r\n\r\n    function updateDrawer(open: boolean) {\r\n        isOpen = open;\r\n        if (isOpen) {\r\n            drawer.classList.add(\"slideRightOpen\");\r\n            return;\r\n        }\r\n        drawer.classList.remove(\"slideRightOpen\");\r\n    }\r\n\r\n    document.addEventListener(\"click\", event => {\r\n        const ele = event.target as HTMLElement;\r\n\r\n        if (ele === document.querySelector(\"#menu\")) {\r\n            updateDrawer(true);\r\n            return;\r\n        }\r\n\r\n        // Close if click outside of the drawer.\r\n        if (isOpen && !ele.closest(\".slideRight\")) {\r\n            updateDrawer(false);\r\n        }\r\n    });\r\n\r\n    document.querySelector(\"#closeMenu\").addEventListener(\"click\", () => {\r\n        updateDrawer(false);\r\n    });\r\n\r\n    document.querySelector(\"#learnButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"learn.html\";\r\n    });\r\n    document.querySelector(\"#playButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"play.html\";\r\n    });\r\n    document.querySelector(\"#trainButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"train.html\";\r\n    });\r\n    document.querySelector(\"#cubleButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"cuble.html\";\r\n    });\r\n}", "/**\r\n * LocalStorage functions\r\n */\r\n\r\nconst algs = \"algs\";\r\nconst animateTurns = \"animateTurns\";\r\nconst hintStickers = \"hintStickers\";\r\nconst orientation = \"orientation\";\r\nconst showBody = \"showBody\";\r\nconst size = \"size\";\r\nconst user = \"user\";\r\nconst userID = \"userID\";\r\n\r\nexport function getAlgs(setName: string) {\r\n    const item = localStorage.getItem(algs + setName);\r\n    if (item) {\r\n        return JSON.parse(item);\r\n    }\r\n    return [];\r\n}\r\n\r\nexport function setAlgs(setName: string, value: any[]) {\r\n    localStorage.setItem(algs + setName, JSON.stringify(value));\r\n}\r\n\r\nexport function getHintStickers() {\r\n    return getBool(hintStickers) ?? true;\r\n}\r\n\r\nexport function setHintStickers(value) {\r\n    setBool(hintStickers, value);\r\n}\r\n\r\nexport function getOrientation() {\r\n    return localStorage.getItem(orientation) ?? \"\";\r\n}\r\n\r\nexport function setOrientation(value: string) {\r\n    localStorage.setItem(orientation, value);\r\n}\r\n\r\nexport function getShowBody() {\r\n    return getBool(showBody) ?? true;\r\n}\r\n\r\nexport function setShowBody(value) {\r\n    setBool(showBody, value);\r\n}\r\n\r\nexport function getSize() {\r\n    return getFloat(size) ?? 1;\r\n}\r\n\r\nexport function setSize(value) {\r\n    localStorage.setItem(size, value);\r\n}\r\n\r\nexport function getAnimateTurns() {\r\n    return getBool(animateTurns) ?? true;\r\n}\r\n\r\nexport function setAnimateTurns(value) {\r\n    setBool(animateTurns, value);\r\n}\r\n\r\nexport function getUserID() {\r\n    return getInt(userID);\r\n}\r\n\r\nexport function setUserID(value) {\r\n    localStorage.setItem(userID, value);\r\n}\r\n\r\nexport function getUser() {\r\n    return localStorage.getItem(user);\r\n}\r\n\r\nexport function removeUser() {\r\n    localStorage.removeItem(user);\r\n}\r\n\r\nexport function setUser(value) {\r\n    localStorage.setItem(user, value);\r\n}\r\n\r\n/**\r\n * Returns the current boolean associated with the given key, or defaultValue if the given key does not exist.\r\n */\r\nfunction getBool(key: string): boolean {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return value == \"1\";\r\n}\r\n\r\nfunction setBool(key: string, value: boolean) {\r\n    localStorage.setItem(key, value ? \"1\" : \"0\");\r\n}\r\n\r\n/**\r\n * Returns the current integer associated with the given key, or null if the given key does not exist.\r\n */\r\nfunction getInt(key: string) {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return parseInt(value);\r\n}\r\n\r\n/**\r\n * Returns the current float associated with the given key, or null if the given key does not exist.\r\n */\r\nfunction getFloat(key: string) {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return parseFloat(value);\r\n}", "/**\r\n * 725 was chosen because 425 is the width of the main content and 300 is the width of the right panel.\r\n * 425 + 300 = 725\r\n */\r\nexport const NARROW = 725;\r\n\r\nlet opened = false;\r\n\r\nexport function open(ele: HTMLElement) {\r\n    opened = true;\r\n    ele.style.display = \"flex\";\r\n    ele.classList.add(\"slideLeftOpen\");\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n    } else {\r\n        ele.classList.remove(\"slideLeftClosed\");\r\n    }\r\n}\r\n\r\nexport function close(ele: HTMLElement) {\r\n    opened = false;\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n        ele.classList.remove(\"slideLeftOpen\");\r\n        ele.style.display = \"flex\";\r\n    } else {\r\n        ele.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport function toggle(ele: HTMLElement) {\r\n    if (opened) {\r\n        close(ele);\r\n    } else {\r\n        open(ele);\r\n    }\r\n}\r\n\r\nexport function renderHeader(title: string) {\r\n    return `\r\n    <div class=\"row\" style=\"justify-content: space-between; width: 100%; padding-bottom: 16px;\">\r\n        <p style=\"font-weight: bold; padding-right: 2rem;\">${title}</p>\r\n        <svg id=\"closeDrawer\" class=\"xButton\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"black\">\r\n            <path id=\"closeDrawer\" d=\"M 2 2 L 22 22 M 22 2 L 2 22\" stroke-width=\"2\" />\r\n        </svg>\r\n    </div>\r\n    `;\r\n}", "import * as scene from \"./scene\";\r\nimport { addListenersForLeftModal } from \"./ui\";\r\nimport { getAlgs, getOrientation, setAlgs, setOrientation } from \"./store\";\r\nimport * as slide from \"./slide\";\r\nimport { promoteAlg, demoteAlg } from \"./util\";\r\n\r\ntype TrainingAlg = { score: number, alg: string }\r\ntype AlgSet = { cube: string, name: string, algs: string[] };\r\n\r\nconst algData: AlgSet[] = require(\"./alg-data.json\");\r\n\r\ntype State =  {\r\n    solutionShown: boolean,\r\n    retried: boolean,\r\n    solved: boolean,\r\n    settingsOpen: boolean,\r\n    preRotation: string,\r\n    algSet: AlgSet,\r\n    algs: TrainingAlg[],\r\n    preAUF: string,\r\n    postAUF: string,\r\n}\r\n\r\nlet state: State = {\r\n    solutionShown: false,\r\n    retried: false,\r\n    solved: false,\r\n    settingsOpen: false,\r\n    preRotation: \"\",\r\n    algSet: null,\r\n    algs: [],\r\n    preAUF: \"\",\r\n    postAUF: \"\",\r\n};\r\n\r\nfunction applyPre(alg: string, auf: string): string {\r\n    if (auf) {\r\n        return `${auf} ${alg}`;\r\n    }\r\n    return alg;\r\n}\r\n\r\nfunction applyPost(alg: string, auf: string): string {\r\n    if (auf) {\r\n        return `${alg} ${auf}`;\r\n    }\r\n    return alg\r\n}\r\n\r\nfunction matching(stickers: any[], shouldMatch: number[][]): boolean {\r\n    for (let i = 0; i < shouldMatch.length; i++) {\r\n        const first = stickers[shouldMatch[i][0]].face;\r\n        for (let j = 1; j < shouldMatch[i].length; j++) {\r\n            if (first !== stickers[shouldMatch[i][j]].face) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction solved(stickers: any[], algSet: AlgSet): boolean {\r\n    switch (algSet.name) {\r\n        case \"CMLL\":\r\n            return matching(stickers, [\r\n                [0, 2, 6, 8],\r\n                [9, 15],\r\n                [29, 35],\r\n                [36, 42],\r\n                [45, 51],\r\n            ]);\r\n        case \"OLL\":\r\n            return matching(stickers, [\r\n                [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n                [10, 11, 13, 14, 16, 17],\r\n                [18, 19, 20, 21, 22, 23, 24, 25, 26],\r\n                [27, 28, 30, 31, 33, 34],\r\n                [37, 38, 40, 41, 43, 44],\r\n                [46, 47, 489, 50, 52, 53],\r\n            ]);\r\n        // PLL and ZBLL have same logic\r\n        case \"PLL\":\r\n        case \"ZBLL\":\r\n            return matching(stickers, [\r\n                [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n                [9, 12, 15],\r\n                [29, 32, 35],\r\n                [36, 39, 42],\r\n                [45, 48, 51],\r\n                [10, 11, 13, 14, 16, 17],\r\n                [18, 19, 20, 21, 22, 23, 24, 25, 26],\r\n                [27, 28, 30, 31, 33, 34],\r\n                [37, 38, 40, 41, 43, 44],\r\n                [46, 47, 49, 50, 52, 53],\r\n            ]);\r\n        // case \"2x2 CLL\":\r\n        // case \"2x2 EG1\":\r\n        // case \"2x2 EG2\":\r\n        default: \r\n            console.error(\"Not implemented yet:\", algSet.name);\r\n    }\r\n}\r\n\r\nfunction renderDrawer() {\r\n    const drawerEle: HTMLElement = document.querySelector(\"#rightDrawer\");\r\n    if (state.settingsOpen) {\r\n        const optionsData = [\r\n            { value: \"\", text: \"White Green\" },\r\n            { value: \"y'\", text: \"White Orange\" },\r\n            { value: \"y2\", text: \"White Blue\" },\r\n            { value: \"y\", text: \"White Red\" },\r\n            { value: \"z2\", text: \"Yellow Green\" },\r\n            { value: \"z2 y\", text: \"Yellow Orange\" },\r\n            { value: \"x2\", text: \"Yellow Blue\" },\r\n            { value: \"z2 y'\", text: \"Yellow Red\" },\r\n            { value: \"x y2\", text: \"Green White\" },\r\n            { value: \"x y\", text: \"Green Red\" },\r\n            { value: \"x\", text: \"Green Yellow\" },\r\n            { value: \"x y'\", text: \"Green Orange\" },\r\n            { value: \"x'\", text: \"Blue White\" },\r\n            { value: \"x' y\", text: \"Blue Red\" },\r\n            { value: \"x' y2\", text: \"Blue Yellow\" },\r\n            { value: \"x' y'\", text: \"Blue Orange\" },\r\n            { value: \"z y\", text: \"Orange White\" },\r\n            { value: \"z\", text: \"Orange Green\" },\r\n            { value: \"z y'\", text: \"Orange Yellow\" },\r\n            { value: \"z y2\", text: \"Orange Blue\" },\r\n            { value: \"z' y'\", text: \"Red White\" },\r\n            { value: \"z'\", text: \"Red Green\" },\r\n            { value: \"z' y\", text: \"Red Yellow\" },\r\n            { value: \"z' y2\", text: \"Red Blue\" },\r\n        ];\r\n        let optionsHTML = \"\";\r\n        optionsData.forEach(option => {\r\n            const selected = option.value === state.preRotation ? \"selected\" : \"\";\r\n            optionsHTML += `<option value=\"${option.value}\" ${selected}>${option.text}</option>`;\r\n        });\r\n        drawerEle.innerHTML = `\r\n        ${slide.renderHeader(\"Settings\")}\r\n        <p>Cube Orientation</p>\r\n        <select id=\"orientationSelect\">\r\n            ${optionsHTML}\r\n        </select>\r\n        `\r\n        ;\r\n        slide.open(drawerEle);\r\n    } else {\r\n        slide.close(drawerEle);\r\n    }\r\n}\r\n\r\nexport function main() {\r\n    // Initial canvas render\r\n    // scene.renderCanvas(); TODO\r\n\r\n    addListenersForLeftModal();\r\n\r\n    document.addEventListener('keydown', (event) => {\r\n        if (event.key === \" \") {\r\n            // Prevent space from scrolling down\r\n            event.preventDefault();\r\n\r\n            showSolution();\r\n        } else if (event.key == \"Backspace\") {\r\n            retry();\r\n        } else if (event.key == \"Enter\") {\r\n            nextAlg();\r\n        }\r\n        // TODO\r\n        // } else if (scene.cube.matchKeyToTurn(event)) {\r\n        //     scene.animateTurn();\r\n            \r\n        //     if (solved(scene.cube.stickers, state.algSet)) {\r\n        //         showSolved();\r\n\r\n        //         state.solved = true;\r\n        //     }\r\n        // }\r\n    });\r\n\r\n    const algSetSelect = document.querySelector(\"#alg-set-select\");\r\n    algSetSelect.addEventListener(\"change\", (event) => {\r\n        const setName = (event.target as HTMLInputElement).value;\r\n        const algSet = findAlgSet(setName);\r\n        renderAlgSet(algSet);\r\n    });\r\n    algData.forEach(algSet => {\r\n        const option = document.createElement(\"option\");\r\n        option.textContent = algSet.name;\r\n        option.value = algSet.name;\r\n        algSetSelect.appendChild(option);\r\n    });\r\n\r\n\r\n    // Iterate 'algData' and find the desired set. \r\n    function findAlgSet(set: string) {\r\n        return algData.find(algSet => algSet.name === set);\r\n    }\r\n\r\n    function generateRandAUF() {\r\n        const options = [\"\", \"U\", \"U2\", \"U'\"];\r\n        return options[Math.floor(Math.random() * 4)];\r\n    }\r\n\r\n    function loadCurrAlg() {\r\n        hideSolution();\r\n\r\n        let alg = state.algs[0].alg;\r\n\r\n        state.preAUF = generateRandAUF();\r\n        alg = applyPre(alg, state.preAUF);\r\n\r\n        state.postAUF = generateRandAUF();\r\n        alg = applyPost(alg, state.postAUF);\r\n\r\n        // TODO\r\n        // scene.cube.new();\r\n\r\n        // scene.cube.execAlg(state.preRotation);\r\n        \r\n        // scene.cube.execAlgReverse(alg);\r\n        // scene.cube.commitStickers();\r\n\r\n        // scene.render();\r\n    }\r\n\r\n    function nextAlg() {\r\n        if (state.solutionShown || state.retried || !state.solved) {\r\n            demoteAlg(state.algs);\r\n        } else {\r\n            promoteAlg(state.algs);\r\n        }\r\n        setAlgs(state.algSet.name, state.algs);\r\n        state.solutionShown = false;\r\n        state.retried = false;\r\n        state.solved = false;\r\n        loadCurrAlg();\r\n    }\r\n\r\n    const solutionText: HTMLElement = document.querySelector(\"#solution-text\");\r\n    solutionText.addEventListener(\"click\", showSolution);\r\n    const toggleStyles = [\"hover:cursor-pointer\", \"hover:bg-neutral-800\", \"hover:bg-opacity-75\"]\r\n    function showSolution() {\r\n        state.solutionShown = true;\r\n\r\n        let alg = state.algs[0].alg;\r\n\r\n        alg = applyPre(alg, state.preAUF);\r\n\r\n        solutionText.textContent = alg;\r\n        solutionText.classList.remove(...toggleStyles);\r\n    }\r\n    function hideSolution() {\r\n        solutionText.textContent = \"Show solution\";\r\n        solutionText.classList.add(...toggleStyles);\r\n    }\r\n    function showSolved() {\r\n        solutionText.textContent = \"Solved!\";\r\n        solutionText.classList.remove(...toggleStyles);\r\n    }\r\n\r\n    function retry() {\r\n        state.retried = true;\r\n        loadCurrAlg();\r\n    }\r\n\r\n    function renderAlgSet(algSet: AlgSet) {\r\n        state.algSet = algSet;\r\n\r\n        if (algSet.cube == \"2x2\") {\r\n            scene.setNumLayers(2);\r\n        } else if (algSet.cube == \"3x3\") {\r\n            scene.setNumLayers(3);\r\n        }\r\n\r\n        // Remove elements from storedAlgs that are in storedAlgs but not in algs.\r\n        // Add elements to storedAlgs that are in algs but not in storedAlgs.\r\n        let storedAlgs: TrainingAlg[] = getAlgs(algSet.name);\r\n\r\n        storedAlgs = storedAlgs.filter(storedAlg => {\r\n            return algSet.algs.find(alg => storedAlg.alg === alg);\r\n        });\r\n        algSet.algs.forEach(alg => {\r\n            const found = storedAlgs.find(storedAlg => storedAlg.alg === alg);\r\n            if (!found) {\r\n                storedAlgs.push({ score: 0, alg });\r\n            }\r\n        });\r\n        state.algs = storedAlgs;\r\n\r\n        // When rendering an alg set, load the first alg automatically.\r\n        loadCurrAlg();\r\n    }\r\n\r\n    // Initial render\r\n    state.preRotation = getOrientation();\r\n    hideSolution();\r\n    renderAlgSet(algData[0]);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n        renderDrawer();\r\n    });\r\n\r\n    document.addEventListener(\"click\", (event: MouseEvent) => {\r\n        const target = event.target as HTMLElement;\r\n        if (target.id === \"closeDrawer\") {\r\n            slide.close(document.querySelector(\"#rightDrawer\"));\r\n        } else if (target.id === \"next\") {\r\n            nextAlg();\r\n        } else if (target.id === \"trainSettingsButton\") {\r\n            state.settingsOpen = true;\r\n            renderDrawer();\r\n        } else if (target.id === \"try-again\") {\r\n            retry();\r\n        }\r\n    });\r\n\r\n    document.addEventListener(\"change\", (event) => {\r\n        const target = event.target as HTMLOptionElement;\r\n        if (target.id === \"orientationSelect\") {\r\n            state.preRotation = target.value;\r\n            loadCurrAlg();\r\n            setOrientation(target.value);\r\n        }\r\n    });\r\n}\r\n\r\nmain();"],
  "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",
  "names": ["algs", "gl", "open"]
}
