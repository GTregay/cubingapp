{
  "version": 3,
  "sources": ["../../src/scripts/buffers.ts", "../../src/scripts/common/spring.ts", "../../src/scripts/pieceIndices.ts", "../../src/scripts/common/rand.ts", "../../src/scripts/util.ts", "../../src/scripts/scramble.ts", "../../src/scripts/cube.ts", "../../src/scripts/dragDetector.ts", "../../src/scripts/glMatrix.ts", "../../src/scripts/store.ts", "../../src/scripts/scene.ts", "../../src/scripts/ui.ts", "../../src/scripts/slide.ts", "../../src/scripts/train.ts"],
  "sourcesContent": ["import { CubeLogic } from \"./cube.js\";\r\n\r\n/**\r\n * Multiply a 4x4 matrix with a 4x1 matrix, resulting in a 4x1 matrix.\r\n *\r\n * @param a first operand, 4x4 matrix\r\n * @param b second operand, 4x1 matrix\r\n * @returns out\r\n */\r\nfunction multiply(a, b) {\r\n    const out = Array(4);\r\n    let b0 = b[0],\r\n        b1 = b[1],\r\n        b2 = b[2],\r\n        b3 = b[3];\r\n    out[0] = b0 * a[0] + b1 * a[4] + b2 * a[8] + b3 * a[12];\r\n    out[1] = b0 * a[1] + b1 * a[5] + b2 * a[9] + b3 * a[13];\r\n    out[2] = b0 * a[2] + b1 * a[6] + b2 * a[10] + b3 * a[14];\r\n    out[3] = b0 * a[3] + b1 * a[7] + b2 * a[11] + b3 * a[15];\r\n    return out;\r\n}\r\n\r\nexport class Buffers {\r\n    gl: WebGLRenderingContext;\r\n    cube: CubeLogic;\r\n    objects: any[];\r\n\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n    }\r\n\r\n    initBufferData(cube, showBody: boolean, transformMatrix) {\r\n        this.cube = cube;\r\n\r\n        // Vertex positions with gap between stickers\r\n        let allPositions = showBody\r\n            ? this._concatPositions(1.01, 0.02)\r\n            : this._concatPositions(1.02, 0.04);\r\n\r\n        // Vertex positions with no gap so user can drag between stickers\r\n        let allNoGapPositions = this._concatPositions(1.0, 0.0);\r\n\r\n        // Vertex positions of hint stickers\r\n        let allHintPositions = this._concatPositions(1.5, 0.02);\r\n\r\n        this.objects = [];\r\n        for (let i = 0; i < this.cube.numOfStickers; i++) {\r\n            let object: any = {};\r\n\r\n            // TODO improve performance by pre-allocating array memory\r\n            // Maybe refactor to be more readable too\r\n            let positions = [];\r\n            let noGapPos = [];\r\n            let hintPos = [];\r\n            for (let j = 0; j < 12; j++) {\r\n                let index = i * 12 + j;\r\n                positions.push(allPositions[index]);\r\n                noGapPos.push(allNoGapPositions[index]);\r\n                hintPos.push(allHintPositions[index]);\r\n            }\r\n\r\n            object.positionBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, object.positionBuffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);\r\n\r\n            object.noGapPositionBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, object.noGapPositionBuffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(noGapPos), this.gl.STATIC_DRAW);\r\n\r\n            object.hintPositionBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, object.hintPositionBuffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(hintPos), this.gl.STATIC_DRAW);\r\n\r\n            if (transformMatrix) {\r\n                // Represent as homogeneous coordinates\r\n                const homo = [\r\n                    ...multiply(transformMatrix,\r\n                        [noGapPos[0], noGapPos[1], noGapPos[2], 1]),\r\n                    ...multiply(transformMatrix,\r\n                        [noGapPos[3], noGapPos[4], noGapPos[5], 1]),\r\n                    ...multiply(transformMatrix,\r\n                        [noGapPos[6], noGapPos[7], noGapPos[8], 1]),\r\n                    ...multiply(transformMatrix,\r\n                        [noGapPos[9], noGapPos[10], noGapPos[11], 1]),\r\n                ];\r\n\r\n                // Represent as 2D cartesian coordinates by dividing x and y by w\r\n                const cart2d = [\r\n                    homo[0] / homo[3], homo[1] / homo[3],\r\n                    homo[4] / homo[7], homo[5] / homo[7],\r\n                    homo[8] / homo[11], homo[9] / homo[11],\r\n                    homo[12] / homo[15], homo[13] / homo[15],\r\n                ];\r\n                object.cart2d = cart2d;\r\n            }\r\n\r\n            // Define each face as two triangles.\r\n            // Given vertices A, B, C, and D, we define triangles ABC and ACD.\r\n            const indices = [0, 1, 2, 0, 2, 3];\r\n\r\n            object.indexBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\r\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\r\n\r\n            this.objects.push(object);\r\n        }\r\n    }\r\n\r\n    _concatPositions(radius, gap) {\r\n        return [\r\n            ...this._topFace(1, radius, gap),\r\n            ...this._frontFace(0, radius, gap),\r\n            ...this._bottomFace(1, -radius, gap),\r\n            ...this._backFace(0, -radius, gap),\r\n            ...this._leftFace(2, -radius, gap),\r\n            ...this._rightFace(2, radius, gap),\r\n        ];\r\n    }\r\n\r\n    // Notes for face functions\r\n    //\r\n    // 0 3 6\r\n    // 1 4 7\r\n    // 2 5 8\r\n    //\r\n    // a (axis): 0, 1, or 2\r\n    // n (negative): -1.0 or 1.0\r\n\r\n    _topFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = 0; i < this.cube.layers; i++) {\r\n                for (let j = 0; j < this.cube.layers; j++) {\r\n                    const a = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = -this.cube.layersHalf; i <= this.cube.layersHalf; i++) {\r\n                for (let j = -this.cube.layersHalf; j <= this.cube.layersHalf; j++) {\r\n                    coords.push([2.0 * j / this.cube.layers, 2.0 * i / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _frontFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = 0; i < this.cube.layers; i++) {\r\n                for (let j = this.cube.layers - 1; j >= 0; j--) {\r\n                    const a = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = -this.cube.layersHalf; i <= this.cube.layersHalf; i++) {\r\n                for (let j = this.cube.layersHalf; j >= -this.cube.layersHalf; j--) {\r\n                    coords.push([2.0 * i / this.cube.layers, 2.0 * j / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _bottomFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = 0; i < this.cube.layers; i++) {\r\n                for (let j = this.cube.layers - 1; j >= 0; j--) {\r\n                    const a = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = -this.cube.layersHalf; i <= this.cube.layersHalf; i++) {\r\n                for (let j = this.cube.layersHalf; j >= -this.cube.layersHalf; j--) {\r\n                    coords.push([2.0 * j / this.cube.layers, 2.0 * i / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _backFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = 0; i < this.cube.layers; i++) {\r\n                for (let j = 0; j < this.cube.layers; j++) {\r\n                    const a = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = -this.cube.layersHalf; i <= this.cube.layersHalf; i++) {\r\n                for (let j = -this.cube.layersHalf; j <= this.cube.layersHalf; j++) {\r\n                    coords.push([2.0 * i / this.cube.layers, 2.0 * j / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _leftFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = 0; i < this.cube.layers; i++) {\r\n                for (let j = this.cube.layers - 1; j >= 0; j--) {\r\n                    const a = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = -this.cube.layersHalf; i <= this.cube.layersHalf; i++) {\r\n                for (let j = this.cube.layersHalf; j >= -this.cube.layersHalf; j--) {\r\n                    coords.push([2.0 * j / this.cube.layers, 2.0 * i / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _rightFace(a, n, gap) {\r\n        let coords = [];\r\n\r\n        if (this.cube.layersEven) {\r\n            for (let i = this.cube.layers - 1; i >= 0; i--) {\r\n                for (let j = this.cube.layers - 1; j >= 0; j--) {\r\n                    const a = -1 + 1 / this.cube.layers + j * 2 / this.cube.layers;\r\n                    const b = -1 + 1 / this.cube.layers + i * 2 / this.cube.layers;\r\n                    coords.push([a, b, n]);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = this.cube.layersHalf; i >= -this.cube.layersHalf; i--) {\r\n                for (let j = this.cube.layersHalf; j >= -this.cube.layersHalf; j--) {\r\n                    coords.push([2.0 * j / this.cube.layers, 2.0 * i / this.cube.layers, n]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._concatStickers(coords, a, gap);\r\n    }\r\n\r\n    _concatStickers(coords, a, gap) {\r\n        let out = [];\r\n        for (let i = 0; i < this.cube.layersSq; i++) {\r\n            const temp = coords[i];\r\n            out = out.concat(this._sticker(a, temp[0], temp[1], temp[2], gap));\r\n        }\r\n        return out;\r\n    }\r\n\r\n    _sticker(a, x, y, n, gap) {\r\n        // size\r\n        const s = (1.0 / this.cube.layers) - gap;\r\n\r\n        const coords = [\r\n            [x - s, y - s, n],\r\n            [x + s, y - s, n],\r\n            [x + s, y + s, n],\r\n            [x - s, y + s, n],\r\n        ];\r\n\r\n        let out = [];\r\n\r\n        const numOfVerticesInSquare = 4;\r\n        const numOfDimensions = 3;\r\n\r\n        for (let i = 0; i < numOfVerticesInSquare; i++) {\r\n            const temp = coords[i];\r\n            let appendage = [];\r\n            for (let i = 0; i < numOfDimensions; i++) {\r\n                appendage.push(temp[(a + i) % 3]);\r\n            }\r\n            out = out.concat(appendage);\r\n        }\r\n        return out;\r\n    }\r\n}", "// spring constant\r\nconst k = 100;\r\n\r\n// friction constant\r\nconst f = 15;\r\n\r\n/**\r\n * This class is used to animate a value from one state to another.\r\n * It is based on the spring physics model.\r\n */\r\nexport class Spring {\r\n    position: number;\r\n    _velocity: number;\r\n    _acceleration: number;\r\n\r\n    // set this to specify the target position\r\n    target: number;\r\n\r\n    constructor() {\r\n        this.position = 0;\r\n        this._velocity = 200;\r\n        this._acceleration = 0;\r\n\r\n        this.target = 0;\r\n    }\r\n\r\n    update(dt: number) {\r\n        // convert dt to seconds\r\n        dt /= 1000;\r\n\r\n        const springF = -k * (this.position - this.target);\r\n        const dampingF = -f * this._velocity;\r\n\r\n        this._acceleration = springF + dampingF;\r\n\r\n        // v = v0 + at\r\n        this._velocity += this._acceleration * dt;\r\n\r\n        // x = x0 + vt\r\n        this.position += this._velocity * dt;\r\n    }\r\n}", "export const CENTERS = [4, 13, 22, 31, 40, 49];\r\nexport const UBL = [0, 29, 36];\r\nexport const URB = [6, 35, 51];\r\nexport const ULF = [2, 9, 42];\r\nexport const UFR = [8, 15, 45];\r\nexport const DFL = [18, 11, 44];\r\nexport const DRF = [24, 47, 17];\r\nexport const DLB = [20, 38, 27];\r\nexport const DBR = [26, 33, 53];\r\nexport const UB = [3, 32];\r\nexport const UL = [1, 39];\r\nexport const UR = [7, 48];\r\nexport const UF = [5, 12];\r\nexport const FL = [10, 43];\r\nexport const FR = [16, 46];\r\nexport const DF = [21, 14];\r\nexport const DL = [19, 41];\r\nexport const DR = [25, 50];\r\nexport const DB = [23, 30];\r\nexport const BL = [28, 37];\r\nexport const BR = [34, 52];\r\nexport const crossPieces = [\r\n    ...UB,\r\n    ...UL,\r\n    ...UR,\r\n    ...UF,\r\n    ...CENTERS,\r\n];\r\nexport const firstLayerPieces = [\r\n    ...crossPieces,\r\n    ...UBL,\r\n    ...URB,\r\n    ...ULF,\r\n    ...UFR,\r\n];\r\nexport const f2lPieces = [\r\n    ...firstLayerPieces,\r\n    ...FL,\r\n    ...FR,\r\n    ...BL,\r\n    ...BR,\r\n];\r\nexport const lastLayerEdges = [\r\n    ...DF,\r\n    ...DL,\r\n    ...DR,\r\n    ...DB,\r\n];\r\nexport const lastLayerPieces = [\r\n    ...lastLayerEdges,\r\n    ...DFL,\r\n    ...DRF,\r\n    ...DLB,\r\n    ...DBR,\r\n];\r\nexport const allPieces = [\r\n    ...f2lPieces,\r\n    ...lastLayerPieces,\r\n];", "/**\r\n * Returns a random integer in the range [0, int)\r\n */\r\nexport function randInt(int: number) {\r\n    return Math.floor(Math.random() * int);\r\n}", "import { randInt } from \"./common/rand\";\r\n\r\n/**\r\n * Fisher-Yates shuffle: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n * \r\n * Mutates original array and returns the shuffled array\r\n * \r\n * @param array \r\n * @returns shuffled array\r\n */\r\nexport function shuffle(array: any[]) {\r\n    let i = array.length;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (i != 0) {\r\n\r\n        // Pick a remaining element...\r\n        let r = randInt(i);\r\n        i--;\r\n\r\n        // And swap it with the current element.\r\n        let temp = array[r];\r\n        array[r] = array[i];\r\n        array[i] = temp;\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\n/**\r\n * Series produces 2, 5, 9, 14, 20, 27, 35, 44, 54, 65, 77, 80...\r\n */\r\n export function series(n: number) {\r\n    if (n <= 0) {\r\n        return 2;\r\n    }\r\n    return series(n - 1) + n + 2;\r\n}\r\n\r\ntype TrainingElement = {\r\n    alg: any\r\n    score: number,\r\n}\r\n\r\n/** Mutate algs in place */\r\nexport function promoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score++;\r\n    let position = series(algs[0].score);\r\n    const threeFourths = Math.ceil(algs.length * 3 / 4);\r\n    if (position > threeFourths) {\r\n        position = threeFourths + randInt(algs.length - threeFourths);\r\n    }\r\n    move(algs, position);\r\n}\r\n\r\nexport function demoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score = 0;\r\n    move(algs, series(0));\r\n}\r\n\r\n/** Move the first element of arr to position n. Mutate arr in place */\r\nfunction move(arr: Array<any>, n: number) {\r\n    const temp = arr[0];\r\n    for (let i = 0; i < n; i++) {\r\n        arr[i] = arr[i + 1];\r\n    }\r\n    arr[n] = temp;\r\n}", "import { shuffle } from \"./util\";\r\nimport { randInt } from \"./common/rand\";\r\nimport { CubeLogic } from \"./cube\";\r\n\r\nconst U = 0;\r\nconst F = 1;\r\nconst D = 2;\r\nconst B = 3;\r\nconst L = 4;\r\nconst R = 5;\r\n\r\nconst corners = [\r\n    [U, B, L],\r\n    [U, R, B],\r\n    [U, L, F],\r\n    [U, F, R],\r\n    [D, F, L],\r\n    [D, R, F],\r\n    [D, L, B],\r\n    [D, B, R],\r\n];\r\nconst edges = [\r\n    [U, B],\r\n    [U, L],\r\n    [U, R],\r\n    [U, F],\r\n    [F, L],\r\n    [F, R],\r\n    [D, F],\r\n    [D, L],\r\n    [D, R],\r\n    [D, B],\r\n    [B, L],\r\n    [B, R],\r\n];\r\n\r\nexport function scramble3x3(cube: CubeLogic): number[] {\r\n    let eo = orientation(12, 2);\r\n    let co = orientation(8, 3);\r\n    let cp = permutation(8);\r\n    let ep = permutation(12);\r\n    while (permutationParity(cp) !== permutationParity(ep)) {\r\n        cp = permutation(8);\r\n    }\r\n\r\n\r\n    const stickers = Array(54);\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n        const center = cube.center(i);\r\n        stickers[center] = i;\r\n    }\r\n    \r\n    let uCorners = cube.corners(0, 0);\r\n    let fCorners = cube.corners(1, 0);\r\n    let dCorners = cube.corners(2, 0);\r\n    let bCorners = cube.corners(3, 0);\r\n    let lCorners = cube.corners(4, 0);\r\n    let rCorners = cube.corners(5, 0);\r\n\r\n    const fill4C = (cIndices, c1, c2, c3, c4, co1, co2, co3, co4) => {\r\n        /** ci is corner index, o is corner orientation */\r\n        const corner = (ci, o) => corners[cp[ci]][(co[ci] + o) % 3];\r\n        stickers[cIndices.topLeft] = corner(c1, co1);\r\n        stickers[cIndices.topRight] = corner(c2, co2);\r\n        stickers[cIndices.bottomLeft] = corner(c3, co3);\r\n        stickers[cIndices.bottomRight] = corner(c4, co4);\r\n    }\r\n\r\n    fill4C(uCorners, 0, 1, 2, 3, 0, 0, 0, 0);\r\n    fill4C(fCorners, 2, 3, 4, 5, 2, 1, 1, 2);\r\n    fill4C(dCorners, 4, 5, 6, 7, 0, 0, 0, 0);\r\n    fill4C(bCorners, 6, 7, 0, 1, 2, 1, 1, 2);\r\n    fill4C(lCorners, 0, 2, 6, 4, 2, 1, 1, 2);\r\n    fill4C(rCorners, 3, 1, 5, 7, 2, 1, 1, 2);\r\n\r\n    let uEdges = cube.edges(0, 0, 0);\r\n    let fEdges = cube.edges(1, 0, 0);\r\n    let dEdges = cube.edges(2, 0, 0);\r\n    let bEdges = cube.edges(3, 0, 0);\r\n    let lEdges = cube.edges(4, 0, 0);\r\n    let rEdges = cube.edges(5, 0, 0);\r\n\r\n    const fill4E = (eIndices, e1, e2, e3, e4, eo1, eo2, eo3, eo4) => {\r\n        /** ei is edge index, o is edge orientation */\r\n        const edge = (ei, o) => edges[ep[ei]][(eo[ei] + o) % 2];\r\n        stickers[eIndices.top] = edge(e1, eo1);\r\n        stickers[eIndices.left] = edge(e2, eo2);\r\n        stickers[eIndices.right] = edge(e3, eo3);\r\n        stickers[eIndices.bottom] = edge(e4, eo4);\r\n    }\r\n\r\n    fill4E(uEdges, 0, 1, 2, 3, 0, 0, 0, 0);\r\n    fill4E(fEdges, 3, 4, 5, 6, 1, 0, 0, 1);\r\n    fill4E(dEdges, 6, 7, 8, 9, 0, 0, 0, 0);\r\n    fill4E(bEdges, 9, 10, 11, 0, 1, 0, 0, 1);\r\n    fill4E(lEdges, 1, 10, 4, 7, 1, 1, 1, 1);\r\n    fill4E(rEdges, 2, 5, 11, 8, 1, 1, 1, 1);\r\n\r\n    return stickers;\r\n}\r\n\r\n/**\r\n * Returns an array of length `pieces`.\r\n * The contents of the array are numbers in the range [0, `orientations`).\r\n * The numbers in the array should sum to 0 mod `orientations`.\r\n */\r\nfunction orientation(pieces: number, orientations: number) {\r\n    const o: number[] = Array(pieces);\r\n    for (let i = 0; i < pieces; i++) {\r\n        o[i] = randInt(orientations);\r\n    }\r\n    while (!orientationValid(o, orientations)) {\r\n        const randPiece = randInt(pieces);\r\n        o[randPiece] = randInt(orientations);\r\n    }\r\n    return o;\r\n}\r\n\r\nfunction orientationValid(pieces: number[], orientations: number) {\r\n    let sum = 0;\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        sum += pieces[i];\r\n    }\r\n    return sum % orientations === 0;\r\n}\r\n\r\n/**\r\n * Returns 2 things: 1) an array of numbers spanning he range [0, pieces), in random order, \r\n * and 2) a boolean indicating whether an array of pieces has permutation parity.\r\n */\r\nfunction permutation(pieces: number) {\r\n    const p: number[] = Array(pieces);\r\n    for (let i = 0; i < pieces; i++) {\r\n        p[i] = i;\r\n    }\r\n    shuffle(p);\r\n    return p;\r\n}\r\n\r\n/**\r\n * Returns a boolean indicating whether an array of pieces has permutation parity.\r\n */\r\nfunction permutationParity(pieces: number[]) {\r\n    const cpy = [...pieces];\r\n    let parity = false;\r\n    while (true) {\r\n        if (cpy[0] === 0) {\r\n            const misplaced = cpy.findIndex((value, index) => value !== index);\r\n            if (misplaced === -1) {\r\n                return parity;\r\n            }\r\n            cpy[0] = cpy[misplaced];\r\n            cpy[misplaced] = 0;\r\n            parity = !parity;\r\n        } else {\r\n            const temp = cpy[0];\r\n            cpy[0] = cpy[temp];\r\n            cpy[temp] = temp;\r\n            parity = !parity;\r\n        }\r\n    }\r\n}", "import * as pieceIndices from \"./pieceIndices\";\r\nimport { scramble3x3 } from \"./scramble\";\r\n\r\nlet gl;\r\n\r\n// TODO consider renaming\r\n// primary, secondary\r\n// bright, dull\r\nconst WHITE = {\r\n    active: [1.0, 1.0, 1.0, 1.0],\r\n    inactive: [0.5, 0.5, 0.5, 1.0],\r\n}\r\nconst YELLOW = {\r\n    active: [1.0, 1.0, 0.0, 1.0],\r\n    inactive: [0.5, 0.5, 0.0, 1.0],\r\n}\r\nconst GREEN = {\r\n    active: [0.0, 1.0, 0.0, 1.0],\r\n    inactive: [0.0, 0.5, 0.0, 1.0],\r\n}\r\nconst BLUE = {\r\n    active: [0.0, 0.0, 1.0, 1.0],\r\n    inactive: [0.0, 0.0, 0.5, 1.0],\r\n}\r\nconst ORANGE = {\r\n    active: [1.0, 0.5, 0.0, 1.0],\r\n    inactive: [0.5, 0.25, 0.0, 1.0],\r\n}\r\nconst RED = {\r\n    active: [1.0, 0.0, 0.0, 1.0],\r\n    inactive: [0.5, 0.0, 0.0, 1.0],\r\n}\r\nconst BLACK = {\r\n    active: [0.0, 0.0, 0.0, 1.0],\r\n    inactive: [0.0, 0.0, 0.0, 1.0],\r\n}\r\n\r\nconst COLORS = [WHITE, GREEN, YELLOW, BLUE, ORANGE, RED];\r\n\r\nexport type AnimationData = {\r\n    // List with a length of 3. One of the numbers must be -1 or 1, with the \r\n    // sign indication clockwise or counterclockwise. The other two numbers are zero.\r\n    axis: number[];\r\n\r\n    stickers: any[];\r\n    stickersToAnimate: number[];\r\n}\r\n\r\nconst repeatColorFor4Vertices = (rgba, color, face) => {\r\n    const arr = [\r\n        rgba[0], rgba[1], rgba[2], rgba[3],\r\n        rgba[0], rgba[1], rgba[2], rgba[3],\r\n        rgba[0], rgba[1], rgba[2], rgba[3],\r\n        rgba[0], rgba[1], rgba[2], rgba[3],\r\n    ];\r\n\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(arr), gl.STATIC_DRAW);\r\n\r\n    return {\r\n        color,\r\n        face,\r\n        arr,\r\n        buffer,\r\n    };\r\n}\r\n\r\nexport class CubeLogic {\r\n    axis: number;\r\n    activeStickers: any;\r\n    stickers: any[];\r\n    underStickers: any[];\r\n    hintStickers: any[];\r\n    layers: number;\r\n    layersSq: number;\r\n    layersHalf: number;\r\n    layersEven: boolean;\r\n    numOfStickers: number;\r\n    currentStickers: any[];\r\n    affectedStickers: any;\r\n    disableTurn: boolean;\r\n    clockwise: boolean;\r\n    animationQueue: AnimationData[];\r\n    animateTurns: boolean;\r\n\r\n    constructor(_gl, animateTurns: boolean) {\r\n        gl = _gl;\r\n\r\n        this.animationQueue = [];\r\n        this.animateTurns = animateTurns;\r\n    }\r\n\r\n    new() {\r\n        this.axis = 0;\r\n\r\n        if (!this.activeStickers) {\r\n            this.activeStickers = [];\r\n        }\r\n\r\n        const state = Array(this.numOfStickers);\r\n        this.underStickers = Array(this.numOfStickers);\r\n        this.hintStickers = Array(this.numOfStickers);\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            state[i] = Math.floor(i / this.layersSq);\r\n\r\n            // Pass in -1 for face because it shouldn't matter for the under stickers.\r\n            this.underStickers[i] = repeatColorFor4Vertices(BLACK.active, BLACK, -1);\r\n        }\r\n\r\n        this.setCubeState(state);\r\n\r\n        this.setAllAffectedStickers(false);\r\n    }\r\n\r\n    isSolved() {\r\n        let firstOnFace;\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            if (i % this.layersSq === 0) {\r\n                firstOnFace = this.stickers[i].face;\r\n                continue;\r\n            }\r\n            if (firstOnFace !== this.stickers[i].face) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    scramble() {\r\n        if (this.layers === 3) {\r\n            this.scramble3x3();\r\n            return;\r\n        }\r\n        this.naiveScramble();\r\n    }\r\n\r\n    scramble3x3() {\r\n        const colors = scramble3x3(this);\r\n        this.setCubeState(colors);\r\n    }\r\n\r\n    /**\r\n     * Perform an imperfect scramble.\r\n     * I will eventually deprecate this, but this was easier to implement.\r\n     */\r\n    naiveScramble() {\r\n        let numTurns = this.layersSq * 10;\r\n        for (let i = 0; i < numTurns; i++) {\r\n            let axis = Math.floor(Math.random() * 3);\r\n            let layer = Math.floor(Math.random() * this.layers);\r\n            let clockwise = Math.floor(Math.random() * 1) == 0.0;\r\n            this._matchTurn(axis, layer, clockwise);\r\n        }\r\n\r\n        this.commitStickers();\r\n    }\r\n\r\n    cubleScramble() {\r\n        for (let i = 0; i < 54; i++) {\r\n            if (!pieceIndices.CENTERS.includes(i)) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.stickers[i].buffer);\r\n                const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(arr), gl.STATIC_DRAW); // consider making DYNAMIC_DRAW\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is used for the Cuble mini-game. This method should be called\r\n     * after each turn. When a sticker is turned to its correct face, its color is revealed.\r\n     */\r\n    revealCorrectStickers() {\r\n        for (let i = 0; i < 54; i++) {\r\n            if ((0 <= i && i <= 8 && this.stickers[i].color == this.stickers[4].color)\r\n                || (9 <= i && i <= 17 && this.stickers[i].color == this.stickers[13].color)\r\n                || (18 <= i && i <= 26 && this.stickers[i].color == this.stickers[22].color)\r\n                || (27 <= i && i <= 35 && this.stickers[i].color == this.stickers[31].color)\r\n                || (36 <= i && i <= 44 && this.stickers[i].color == this.stickers[40].color)\r\n                || (45 <= i && i <= 53 && this.stickers[i].color == this.stickers[49].color)) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.stickers[i].buffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.stickers[i].arr), gl.STATIC_DRAW); // consider making DYNAMIC_DRAW\r\n            }\r\n        }\r\n    }\r\n\r\n    setNumOfLayers(num: number) {\r\n        this.layers = num;\r\n        this.layersSq = num * num;\r\n        this.layersHalf = Math.floor(this.layers / 2);\r\n        this.layersEven = this.layers % 2 == 0;\r\n        this.numOfStickers = this.layersSq * 6;\r\n    }\r\n\r\n    /**\r\n     * Return a list of numbers representing the cube state. The list will \r\n     * contain integers 0-6, with each integer corresponding to a face's color.\r\n     * 0 -> top\r\n     * 1 -> front\r\n     * 2 -> bottom\r\n     * 3 -> back\r\n     * 4 -> left\r\n     * 5 -> right\r\n     */\r\n    getCubeState(): number[] {\r\n        return this.currentStickers.map(sticker => sticker.face);\r\n    }\r\n\r\n    setCubeState(state: number[]) {\r\n        this.stickers = Array(this.numOfStickers);\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            const color = COLORS[state[i]];\r\n            this.stickers[i] = repeatColorFor4Vertices(color.active, color, state[i]);\r\n        }\r\n        this.commitStickers();\r\n    }\r\n\r\n    getStickers() {\r\n        return this.currentStickers;\r\n    }\r\n\r\n    /** \r\n     * Take the stickers that have been modified and transfer them to currentStickers \r\n    */\r\n    commitStickers() {\r\n        this.currentStickers = [...this.stickers];\r\n    }\r\n\r\n    getUnderStickers() {\r\n        return this.underStickers;\r\n    }\r\n\r\n    getAffectedStickers() {\r\n        return this.affectedStickers;\r\n    }\r\n\r\n    /**\r\n     * Set all elements of `affectedStickers` to be `value`.\r\n     */\r\n    setAllAffectedStickers(value: boolean) {\r\n        this.affectedStickers = Array(this.numOfStickers);\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            this.affectedStickers[i] = value;\r\n        }\r\n    }\r\n\r\n    resetAffectedStickers() {\r\n        // If numOfLayers === 1, make all stickers true, because everything\r\n        // should be affected for 1x1.\r\n        this.setAllAffectedStickers(this.layers === 1);\r\n    }\r\n\r\n    setActiveStickers(arr) {\r\n        this.activeStickers = arr;\r\n    }\r\n\r\n    // Turning will be disabled on the \"learn\" page. There will be an animation instead of letting the user turn.\r\n    setDisableTurn(val) {\r\n        this.disableTurn = val;\r\n    }\r\n\r\n    activateAllStickers() {\r\n        this.activeStickers = [];\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            this.activeStickers.push(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the next animation queued, or undefined if there are no animations queued.\r\n     */\r\n    shiftAnimation() {\r\n        return this.animationQueue.shift();\r\n    }\r\n\r\n    pushAnimation(axis, clockwise, prevStickers) {\r\n        if (!this.animateTurns) return;\r\n\r\n        let x = clockwise ? -1 : 1;\r\n        let rotationAxis;\r\n        if (axis == 0) {\r\n            rotationAxis = [x, 0, 0];\r\n        } else if (axis == 1) {\r\n            rotationAxis = [0, x, 0];\r\n        } else if (axis == 2) {\r\n            rotationAxis = [0, 0, x];\r\n        } else {\r\n            console.error(`Invalid axis '${axis}'`);\r\n        }\r\n\r\n        this.animationQueue.push({\r\n            axis: rotationAxis,\r\n            stickers: prevStickers,\r\n            stickersToAnimate: this.affectedStickers,\r\n        });\r\n    }\r\n\r\n    turn(axis, layer, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        this._matchTurn(axis, layer, clockwise);\r\n    }\r\n\r\n    sliceTurn(axis, clockwise) {\r\n        this.setAllAffectedStickers(false);\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        for (let i = 1; i < this.layers - 1; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n    }\r\n\r\n    wideTurn(axis, layer, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        this._matchTurn(axis, layer, clockwise);\r\n        for (let i = 1; i < this.layers - 1; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n\r\n    }\r\n\r\n    cubeRotate(axis, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n    }\r\n\r\n    _matchTurn(axis, layer, clockwise) {\r\n        if (axis == 0) {\r\n            this._turnXAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(5, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(4, !clockwise);\r\n            }\r\n        } else if (axis == 1) {\r\n            this._turnYAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(0, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(2, !clockwise);\r\n            }\r\n        } else if (axis == 2) {\r\n            this._turnZAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(1, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(3, !clockwise);\r\n            }\r\n        } else {\r\n            console.error(`Axis ${axis} not recognized`);\r\n        }\r\n    }\r\n\r\n    _turnXAxis(layer, clockwise) {\r\n        for (let i = 1; i <= this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                0 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                3 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                2 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                1 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnYAxis(layer, clockwise) {\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                1 * this.layersSq + i * this.layers + layer,\r\n                4 * this.layersSq + i * this.layers + layer,\r\n                3 * this.layersSq + (this.layers - i - 1) * this.layers + (this.layers - 1) - layer,\r\n                5 * this.layersSq + i * this.layers + layer,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnZAxis(layer, clockwise) {\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                0 * this.layersSq + (i + 1) * this.layers - 1 - layer,\r\n                5 * this.layersSq + i + this.layers * layer,\r\n                2 * this.layersSq + (this.layers - i - 1) * this.layers + layer,\r\n                4 * this.layersSq + this.layersSq - (i + 1) - layer * this.layers,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnOuter(face, clockwise) {\r\n        if (this.layers % 2 != 0) {\r\n            let center = this.center(face);\r\n            this.affectedStickers[center] = true;\r\n        }\r\n\r\n        for (let i = 0; i < Math.floor(this.layers / 2); i++) {\r\n            const { topLeft, topRight, bottomLeft, bottomRight } = this.corners(face, i);\r\n\r\n            this._cycle(clockwise, topLeft, topRight, bottomRight, bottomLeft);\r\n\r\n            let numEdges = this.layers - 2 * (i + 1);\r\n            for (let j = 0; j < numEdges; j++) {\r\n                const { top, left, bottom, right } = this.edges(face, i, j);\r\n                this._cycle(clockwise, top, right, bottom, left);\r\n            }\r\n        }\r\n    }\r\n\r\n    _cycle(clockwise, i1, i2, i3, i4) {\r\n        this.affectedStickers[i1] = true;\r\n        this.affectedStickers[i2] = true;\r\n        this.affectedStickers[i3] = true;\r\n        this.affectedStickers[i4] = true;\r\n\r\n        if (clockwise) {\r\n            this._cycleHelper(i1, i2, i3, i4);\r\n        } else {\r\n            this._cycleHelper(i4, i3, i2, i1);\r\n        }\r\n    }\r\n\r\n    _cycleHelper(i1, i2, i3, i4) {\r\n        let temp = this.stickers[i4];\r\n        this.stickers[i4] = this.stickers[i3];\r\n        this.stickers[i3] = this.stickers[i2];\r\n        this.stickers[i2] = this.stickers[i1];\r\n        this.stickers[i1] = temp;\r\n    }\r\n\r\n    /**\r\n     * Why use KeyboardEvent.code instead of KeyboardEvent.key?\r\n     * 1) `key` is dependent on \"the state of modifier keys such as Shift as well as the keyboard locale and layout.\"\r\n     * 2) `code` is useful when you want to handle keys based on their physical positions. This is common for games.\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\r\n     */\r\n    matchKeyToTurn(event: KeyboardEvent) {\r\n        if (this.disableTurn) return;\r\n\r\n        // Don't turn if the user is holding down ctrl\r\n        // E.g., the user might be using Ctrl + Shift + R to refresh the page or Ctrl + Shift + I to open the dev tools\r\n        if (event.ctrlKey) return;\r\n\r\n        const code = event.code;\r\n\r\n        switch (code) {\r\n            case \"KeyN\":\r\n                this.cubeRotate(0, true);\r\n                return { notation: \"x\", rotate: true };\r\n            case \"KeyB\":\r\n                this.cubeRotate(0, false);\r\n                return { notation: \"x'\", rotate: true };\r\n            case \"Semicolon\":\r\n                this.cubeRotate(1, true);\r\n                return { notation: \"y\", rotate: true };\r\n            case \"KeyA\":\r\n                this.cubeRotate(1, false);\r\n                return { notation: \"y'\", rotate: true };\r\n            case \"KeyP\":\r\n                this.cubeRotate(2, true);\r\n                return { notation: \"z\", rotate: true };\r\n            case \"KeyQ\":\r\n                this.cubeRotate(2, false);\r\n                return { notation: \"z'\", rotate: true };\r\n            case \"KeyJ\":\r\n                this.turn(1, 0, true);\r\n                return { notation: \"U\", turn: true };\r\n            case \"KeyF\":\r\n                this.turn(1, 0, false);\r\n                return { notation: \"U'\", turn: true };\r\n            case \"KeyS\":\r\n                this.turn(1, this.layers - 1, false);\r\n                return { notation: \"D\", turn: true };\r\n            case \"KeyL\":\r\n                this.turn(1, this.layers - 1, true);\r\n                return { notation: \"D'\", turn: true };\r\n            case \"KeyH\":\r\n                this.turn(2, 0, true);\r\n                return { notation: \"F\", turn: true };\r\n            case \"KeyG\":\r\n                this.turn(2, 0, false);\r\n                return { notation: \"F'\", turn: true };\r\n            case \"KeyW\":\r\n                this.turn(2, this.layers - 1, false);\r\n                return { notation: \"B\", turn: true };\r\n            case \"KeyO\":\r\n                this.turn(2, this.layers - 1, true);\r\n                return { notation: \"B'\", turn: true };\r\n            case \"KeyD\":\r\n                this.turn(0, this.layers - 1, false);\r\n                return { notation: \"L\", turn: true };\r\n            case \"KeyE\":\r\n                this.turn(0, this.layers - 1, true);\r\n                return { notation: \"L'\", turn: true };\r\n            case \"KeyI\":\r\n                this.turn(0, 0, true);\r\n                return { notation: \"R\", turn: true };\r\n            case \"KeyK\":\r\n                this.turn(0, 0, false);\r\n                return { notation: \"R'\", turn: true };\r\n            case \"BracketLeft\":\r\n                this.sliceTurn(0, false);\r\n                return { notation: \"M\", turn: true };\r\n            case \"Quote\":\r\n                this.sliceTurn(0, true);\r\n                return { notation: \"M'\", turn: true };\r\n            case \"KeyC\":\r\n                this.sliceTurn(1, false);\r\n                return { notation: \"E\", turn: true };\r\n            case \"Comma\":\r\n                this.sliceTurn(1, true);\r\n                return { notation: \"E'\", turn: true };\r\n            case \"KeyY\":\r\n                this.sliceTurn(2, true);\r\n                return { notation: \"S\", turn: true };\r\n            case \"KeyT\":\r\n                this.sliceTurn(2, false);\r\n                return { notation: \"S'\", turn: true };\r\n            case \"KeyU\":\r\n                this.wideTurn(0, 0, true);\r\n                return { notation: \"r\", turn: true };\r\n            case \"KeyM\":\r\n                this.wideTurn(0, 0, false);\r\n                return { notation: \"r'\", turn: true };\r\n            case \"KeyV\":\r\n                this.wideTurn(0, this.layers - 1, false);\r\n                return { notation: \"l\", turn: true };\r\n            case \"KeyR\":\r\n                this.wideTurn(0, this.layers - 1, true);\r\n                return { notation: \"l'\", turn: true };\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    stepAlgorithm(move: string, forward: boolean) {\r\n        switch (move) {\r\n            case \"x\":\r\n                this.cubeRotate(0, forward);\r\n                break;\r\n            case \"x'\":\r\n                this.cubeRotate(0, !forward);\r\n                break;\r\n            case \"x2\":\r\n                this.cubeRotate(0, forward);\r\n                this.cubeRotate(0, forward);\r\n                break;\r\n            case \"y\":\r\n                this.cubeRotate(1, forward);\r\n                break;\r\n            case \"y'\":\r\n                this.cubeRotate(1, !forward);\r\n                break;\r\n            case \"y2\":\r\n                this.cubeRotate(1, forward);\r\n                this.cubeRotate(1, forward);\r\n                break;\r\n            case \"z\":\r\n                this.cubeRotate(2, forward);\r\n                break;\r\n            case \"z'\":\r\n                this.cubeRotate(2, !forward);\r\n                break;\r\n            case \"z2\":\r\n                this.cubeRotate(2, forward);\r\n                this.cubeRotate(2, forward);\r\n                break;\r\n            case \"U\":\r\n                this.turn(1, 0, forward);\r\n                break;\r\n            case \"U'\":\r\n                this.turn(1, 0, !forward);\r\n                break;\r\n            case \"U2\":\r\n            case \"U2'\":\r\n                this.turn(1, 0, forward);\r\n                this.turn(1, 0, forward);\r\n                break;\r\n            case \"D\":\r\n                this.turn(1, this.layers - 1, !forward);\r\n                break;\r\n            case \"D'\":\r\n                this.turn(1, this.layers - 1, forward);\r\n                break;\r\n            case \"D2\":\r\n                this.turn(1, this.layers - 1, forward);\r\n                this.turn(1, this.layers - 1, forward);\r\n                break;\r\n            case \"F\":\r\n                this.turn(2, 0, forward);\r\n                break;\r\n            case \"F'\":\r\n                this.turn(2, 0, !forward);\r\n                break;\r\n            case \"F2\":\r\n                this.turn(2, 0, forward);\r\n                this.turn(2, 0, forward);\r\n                break;\r\n            case \"B\":\r\n                this.turn(2, this.layers - 1, !forward);\r\n                break;\r\n            case \"B'\":\r\n                this.turn(2, this.layers - 1, forward);\r\n                break\r\n            case \"B2\":\r\n                this.turn(2, this.layers - 1, forward);\r\n                this.turn(2, this.layers - 1, forward);\r\n                break\r\n            case \"L\":\r\n                this.turn(0, this.layers - 1, !forward);\r\n                break;\r\n            case \"L'\":\r\n                this.turn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"L2\":\r\n                this.turn(0, this.layers - 1, forward);\r\n                this.turn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"l\":\r\n                this.wideTurn(0, this.layers - 1, !forward);\r\n                break;\r\n            case \"l'\":\r\n                this.wideTurn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"R\":\r\n                this.turn(0, 0, forward);\r\n                break;\r\n            case \"R'\":\r\n                this.turn(0, 0, !forward);\r\n                break;\r\n            case \"R2\":\r\n            case \"R2'\":\r\n                this.turn(0, 0, forward);\r\n                this.turn(0, 0, forward);\r\n                break;\r\n            case \"r\":\r\n                this.wideTurn(0, 0, forward);\r\n                break;\r\n            case \"r'\":\r\n                this.wideTurn(0, 0, !forward);\r\n                break;\r\n            case \"r2\":\r\n            case \"r2'\":\r\n                this.wideTurn(0, 0, forward);\r\n                this.wideTurn(0, 0, forward);\r\n                break;\r\n            case \"M\":\r\n                this.turn(0, 1, !forward);\r\n                break;\r\n            case \"M'\":\r\n                this.turn(0, 1, forward);\r\n                break;\r\n            case \"M2\":\r\n                this.sliceTurn(0, forward);\r\n                this.sliceTurn(0, forward);\r\n                break;\r\n            case \"E\":\r\n                this.sliceTurn(1, !forward);\r\n                break;\r\n            case \"E'\":\r\n                this.sliceTurn(1, forward);\r\n                break;\r\n            case \"S\":\r\n                this.sliceTurn(2, forward);\r\n                break;\r\n            case \"S'\":\r\n                this.sliceTurn(2, !forward);\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid turn in algorithm: \" + move);\r\n        }\r\n    }\r\n\r\n    execAlg(alg: string) {\r\n        if (!alg) return;\r\n\r\n        let moves = alg.split(\" \");\r\n        for (let i = 0; i < moves.length; i++) {\r\n            this.stepAlgorithm(moves[i], true);\r\n        }\r\n\r\n        // Clear the animation queue so that all the turns don't get animated\r\n        this.animationQueue = [];\r\n    }\r\n\r\n    execAlgReverse(alg: string) {\r\n        if (!alg) return;\r\n\r\n        let moves = alg.split(\" \");\r\n        for (let i = moves.length - 1; i >= 0; i--) {\r\n            this.stepAlgorithm(moves[i], false);\r\n        }\r\n\r\n        // Clear the animation queue so that all the turns don't get animated\r\n        this.animationQueue = [];\r\n    }\r\n\r\n    stickerIsOnFace(sticker: number, face: number) {\r\n        return face * this.layersSq <= sticker && sticker < (face + 1) * this.layersSq;\r\n    }\r\n\r\n    center(face: number) {\r\n        return face * this.layersSq + Math.floor(this.layersSq / 2);\r\n    }\r\n\r\n    corners(face: number, layer: number) {\r\n        const offset = face * this.layersSq;\r\n        return {\r\n            topLeft: offset + (this.layers + 1) * layer,\r\n            topRight: offset + (this.layers - 1) * (this.layers - layer),\r\n            bottomRight: offset + (this.layers + 1) * (this.layers - layer - 1),\r\n            bottomLeft: offset + (this.layers - 1) * (layer + 1),\r\n        };\r\n    }\r\n\r\n    edges(face: number, corner: number, edge: number) {\r\n        const corners = this.corners(face, corner);\r\n        let numEdges = this.layers - 2 * (corner + 1);\r\n        return {\r\n            top: corners.topLeft + this.layers * (edge + 1),\r\n            left: corners.topLeft + (numEdges - edge),\r\n            right: corners.topRight + edge + 1,\r\n            bottom: corners.bottomLeft + this.layers * (numEdges - edge),\r\n        };\r\n    }\r\n}", "import { Buffers } from \"./buffers\";\r\nimport { CubeLogic } from \"./cube\";\r\n\r\n/**\r\n * Translate coordinate from pixels (relative to canvas) to clipping space\r\n */\r\nfunction xPixelToClip(val: number, canvasSize: number) {\r\n    return val / canvasSize * 2 - 1;\r\n}\r\n\r\n/**\r\n * Translate coordinate from pixels (relative to canvas) to clipping space\r\n */\r\nfunction yPixelToClip(val: number, canvasSize: number) {\r\n    return 1 - val / canvasSize * 2;\r\n}\r\n\r\nfunction calcSlope(x1: number, y1: number, x2: number, y2: number) {\r\n    if (x1 < x2) {\r\n        return (y2 - y1) / (x2 - x1);\r\n    }\r\n    return (y1 - y2) / (x1 - x2);\r\n}\r\n\r\nfunction areaTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\r\n    return Math.abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));\r\n}\r\n\r\nfunction topRow(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - sticker % cube.layers;\r\n}\r\n\r\nfunction topColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor(sticker / cube.layers);\r\n}\r\n\r\nfunction frontRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction frontColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor((sticker - cube.layersSq) / cube.layers);\r\n}\r\n\r\nfunction leftRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction leftColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor((sticker - 4 * cube.layersSq) / cube.layers);\r\n}\r\n\r\nfunction rightRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction rightColumn(cube: CubeLogic, sticker: number) {\r\n    return Math.floor((sticker - 5 * cube.layersSq) / cube.layers);\r\n}\r\n\r\ntype SceneArgsType = { canvas: any, cube: any, buffers: any, offsetSelection: any, animateTurn: any };\r\n\r\nexport class DragDetector {\r\n    numOfPointerMoves: number;\r\n    xOnDown: number;\r\n    yOnDown: number;\r\n    xOnMove: number;\r\n    yOnMove: number;\r\n    stickerOnDown: number;\r\n    cart2dOnDown: number[];\r\n\r\n    /**\r\n     * x and y are pixel values.\r\n     */\r\n    onPointerDown(x: number, y: number, sceneArgs: SceneArgsType) {\r\n        const { canvas, cube, buffers, offsetSelection, animateTurn } = sceneArgs;\r\n\r\n        this.numOfPointerMoves = 0;\r\n\r\n        const clipX = xPixelToClip(x, canvas.width);\r\n        const clipY = yPixelToClip(y, canvas.width);\r\n        this.xOnDown = clipX;\r\n        this.yOnDown = clipY;\r\n\r\n        [this.stickerOnDown, this.cart2dOnDown] = this._coordinatesToSticker(clipX, clipY, cube, buffers, offsetSelection);\r\n\r\n        const objects = buffers.objects;\r\n        const getXY = (objectIndex, xIndex, yIndex) => ({\r\n            x: objects[objectIndex].cart2d[xIndex],\r\n            y: objects[objectIndex].cart2d[yIndex],\r\n        });\r\n\r\n        if (this.stickerOnDown === -1) {\r\n            if (offsetSelection === 0) {\r\n                const top = getXY(cube.layers * (cube.layers - 1), 6, 7);\r\n                const topLeft = getXY(0, 0, 1);\r\n                const bottomLeft = getXY(cube.layers * (2 * cube.layers + 1), 0, 1);\r\n                if (clipY > topLeft.y) {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(0, true);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(2, true);\r\n                        animateTurn();\r\n                    }\r\n                } else if (clipY > bottomLeft.y) {\r\n                    cube.cubeRotate(1, clipX < bottomLeft.x);\r\n                    animateTurn();\r\n                } else {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(2, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(0, false);\r\n                        animateTurn();\r\n                    }\r\n                }\r\n            } else if (offsetSelection === 1) {\r\n                const topLeft = getXY(0, 0, 1);\r\n                const topRight = getXY(cube.layers * (cube.layers - 1), 6, 7);\r\n                const left = getXY(cube.layers - 1, 2, 3);\r\n                const right = getXY(cube.layersSq - 1, 4, 5);\r\n                const bottomLeft = getXY(cube.layers * (cube.layers + 1) - 1, 0, 1);\r\n                const bottomRight = getXY(cube.layersSq * 2 - 1, 2, 3);\r\n                if (clipY > topLeft.y && clipX > topLeft.x && clipX < topRight.x) {\r\n                    cube.cubeRotate(0, true);\r\n                    animateTurn();\r\n                } else if (clipX < topLeft.x && clipY > left.y && clipY < topLeft.y) {\r\n                    cube.cubeRotate(2, false);\r\n                    animateTurn();\r\n                } else if (clipX > topRight.x && clipY > right.y && clipY < topRight.y) {\r\n                    cube.cubeRotate(2, true);\r\n                    animateTurn();\r\n                } else if (clipX < bottomLeft.x && clipY > bottomLeft.y && clipY < left.y) {\r\n                    cube.cubeRotate(1, true);\r\n                    animateTurn();\r\n                } else if (clipX > bottomRight.x && clipY > bottomRight.y && clipY < right.y) {\r\n                    cube.cubeRotate(1, false);\r\n                    animateTurn();\r\n                } else if (clipY < bottomLeft.y && clipX > bottomLeft.x && clipX < bottomRight.x) {\r\n                    cube.cubeRotate(0, false);\r\n                    animateTurn();\r\n                }\r\n            } else if (offsetSelection === 2) {\r\n                const top = getXY(0, 0, 1);\r\n                const topLeft = getXY(cube.layers - 1, 2, 3);\r\n                const bottomLeft = getXY(cube.layers * (cube.layers + 1) - 1, 0, 1);\r\n                if (clipY > topLeft.y) {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(2, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(0, true);\r\n                        animateTurn();\r\n                    }\r\n                } else if (clipY > bottomLeft.y) {\r\n                    cube.cubeRotate(1, clipX < bottomLeft.x);\r\n                    animateTurn();\r\n                } else {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(0, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(2, true);\r\n                        animateTurn();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * x and y are pixel values.\r\n     */\r\n    onPointerMove(x: number, y: number) {\r\n        this.numOfPointerMoves++;\r\n        this.xOnMove = x;\r\n        this.yOnMove = y;\r\n    }\r\n\r\n    onPointerUp(sceneArgs: SceneArgsType) {\r\n        // Do nothing if the pointer movement was tiny.\r\n        if (this.numOfPointerMoves < 2) return;\r\n\r\n        const { canvas, cube, buffers, offsetSelection, animateTurn } = sceneArgs;\r\n\r\n        let posSlope, negSlope;\r\n        if (this.stickerOnDown !== -1) {\r\n            posSlope = calcSlope(this.cart2dOnDown[0], this.cart2dOnDown[1], this.cart2dOnDown[4], this.cart2dOnDown[5]);\r\n            negSlope = calcSlope(this.cart2dOnDown[2], this.cart2dOnDown[3], this.cart2dOnDown[6], this.cart2dOnDown[7]);\r\n            if (posSlope < 0) {\r\n                const temp = posSlope;\r\n                posSlope = negSlope;\r\n                negSlope = temp;\r\n            }\r\n        }\r\n\r\n        const xClip = xPixelToClip(this.xOnMove, canvas.width);\r\n        const yClip = yPixelToClip(this.yOnMove, canvas.width);\r\n\r\n        const slope = calcSlope(xClip, yClip, this.xOnDown, this.yOnDown);\r\n\r\n        const [stickerOnUp, _] = this._coordinatesToSticker(xClip, yClip, cube, buffers, offsetSelection);\r\n\r\n        if (offsetSelection === 0) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 4)) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), false);\r\n                } else if (slope < 0) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), this.xOnDown > xClip);\r\n                } else {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 4)) {\r\n                    cube.turn(1, frontRow(cube, this.stickerOnDown), true);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 4)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(2, leftColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(1, leftRow(cube, this.stickerOnDown), false);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(2, leftColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(2, leftColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(2, leftColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, leftRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        } else if (offsetSelection === 1) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (xClip === this.xOnDown) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, topColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, topColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(2, topRow(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        } else if (offsetSelection === 2) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 5)) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), true);\r\n                } else if (slope < 0) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                } else {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 5)) {\r\n                    cube.turn(1, frontRow(cube, this.stickerOnDown), false);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 5)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(2, rightColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(1, rightRow(cube, this.stickerOnDown), true);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(2, rightColumn(cube, this.stickerOnDown), yClip < this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(2, rightColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(2, rightColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, rightRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        animateTurn();\r\n    }\r\n\r\n    /**\r\n     * Find the sticker with cart2d that contains this coordinate.\r\n     * Return -1 if it's not in any sticker.\r\n     */\r\n    _coordinatesToSticker(x: number, y: number, cube: CubeLogic, buffers: Buffers, offsetSelection: number) {\r\n        const coordinateIsInSticker = i => {\r\n            if (!buffers.objects[i].cart2d) return;\r\n            const cart2d = buffers.objects[i].cart2d;\r\n            // Determine if coordinate is in convex quadrilateral\r\n            const areaQuadrilateral = areaTriangle(cart2d[0], cart2d[1], cart2d[2], cart2d[3], cart2d[4], cart2d[5])\r\n                + areaTriangle(cart2d[0], cart2d[1], cart2d[4], cart2d[5], cart2d[6], cart2d[7]);\r\n            const sumAreaTriangles = areaTriangle(x, y, cart2d[0], cart2d[1], cart2d[2], cart2d[3])\r\n                + areaTriangle(x, y, cart2d[2], cart2d[3], cart2d[4], cart2d[5])\r\n                + areaTriangle(x, y, cart2d[4], cart2d[5], cart2d[6], cart2d[7])\r\n                + areaTriangle(x, y, cart2d[6], cart2d[7], cart2d[0], cart2d[1]);\r\n            const EPSILON = 0.00001;\r\n            if (Math.abs(areaQuadrilateral - sumAreaTriangles) < EPSILON) {\r\n                // This means the coordinate is in the convex quadrilateral!\r\n                return [\r\n                    i,\r\n                    cart2d,\r\n                ];\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        for (let i = 0; i < 2 * cube.layersSq; i++) {\r\n            const output = coordinateIsInSticker(i);\r\n            if (output) return output;\r\n        }\r\n\r\n        if (offsetSelection === 1) return [-1, undefined];\r\n\r\n        if (offsetSelection === 0) {\r\n            for (let i = 4 * cube.layersSq; i < 5 * cube.layersSq; i++) {\r\n                const output = coordinateIsInSticker(i);\r\n                if (output) return output;\r\n            }\r\n        }\r\n\r\n        if (offsetSelection === 2) {\r\n            for (let i = 5 * cube.layersSq; i < 6 * cube.layersSq; i++) {\r\n                const output = coordinateIsInSticker(i);\r\n                if (output) return output;\r\n            }\r\n        }\r\n\r\n        return [-1, undefined];\r\n    }\r\n}", "/**\r\n * This file contains matrix operations for webgl.\r\n */\r\n\r\n/** Create and return an identity 4x4 matrix */\r\nexport function create() {\r\n    return [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n    ];\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param out 4x4 frustum matrix that will be written to\r\n * @param fovy Vertical field of view in radians\r\n * @param aspect Aspect ratio. typically viewport width/height\r\n * @param near Near bound of the frustum\r\n * @param far Far bound of the frustum, can be null or Infinity\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n    const f = 1.0 / Math.tan(fovy / 2);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n\r\n    if (far != null && far !== Infinity) {\r\n        const nf = 1 / (near - far);\r\n        out[10] = (far + near) * nf;\r\n        out[14] = 2 * far * near * nf;\r\n    } else {\r\n        out[10] = -1;\r\n        out[14] = -2 * near;\r\n    }\r\n}\r\n\r\n/**\r\n * Rotate a 4x4 matrix\r\n *\r\n * @param out destination matrix\r\n * @param a matrix to rotate\r\n * @param rad angle to rotate the matrix by\r\n * @param axis axis to rotate around\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n    let x = axis[0],\r\n        y = axis[1],\r\n        z = axis[2],\r\n        len = Math.hypot(x, y, z);\r\n\r\n    len = 1 / len;\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    let s = Math.sin(rad),\r\n        c = Math.cos(rad),\r\n        t = 1 - c,\r\n        a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3],\r\n        a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7],\r\n        a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11],\r\n        b00 = x * x * t + c,\r\n        b01 = y * x * t + z * s,\r\n        b02 = z * x * t - y * s,\r\n        b10 = x * y * t - z * s,\r\n        b11 = y * y * t + c,\r\n        b12 = z * y * t + x * s,\r\n        b20 = x * z * t + y * s,\r\n        b21 = y * z * t - x * s,\r\n        b22 = z * z * t + c;\r\n\r\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n    // If the source and destination differ, copy the unchanged last row\r\n    if (a !== out) {\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param m source and destination matrix\r\n * @param v vector to translate by\r\n */\r\nexport function translate(m, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n\r\n    m[12] += m[0] * x + m[4] * y + m[7] * z;\r\n    m[13] += m[1] * x + m[5] * y + m[8] * z;\r\n    m[14] += m[2] * x + m[5] * y + m[9] * z;\r\n    m[15] += m[3] * x + m[6] * y + m[10] * z;\r\n}", "/**\r\n * LocalStorage functions\r\n */\r\n\r\nconst algs = \"algs\";\r\nconst angle = \"angle\";\r\nconst animateTurns = \"animateTurns\";\r\nconst hintStickers = \"hintStickers\";\r\nconst orientation = \"orientation\";\r\nconst showBody = \"showBody\";\r\nconst size = \"size\";\r\nconst user = \"user\";\r\nconst userID = \"userID\";\r\n\r\nexport function getAlgs(setName: string) {\r\n    const item = localStorage.getItem(algs + setName);\r\n    if (item) {\r\n        return JSON.parse(item);\r\n    }\r\n    return [];\r\n}\r\n\r\nexport function setAlgs(setName: string, value: any[]) {\r\n    localStorage.setItem(algs + setName, JSON.stringify(value));\r\n}\r\n\r\nexport function getAngle() {\r\n    return getInt(angle) ?? 1;\r\n}\r\n\r\nexport function setAngle(value) {\r\n    localStorage.setItem(angle, value);\r\n}\r\n\r\nexport function getHintStickers() {\r\n    return getBool(hintStickers) ?? true;\r\n}\r\n\r\nexport function setHintStickers(value) {\r\n    setBool(hintStickers, value);\r\n}\r\n\r\nexport function getOrientation() {\r\n    return localStorage.getItem(orientation) ?? \"\";\r\n}\r\n\r\nexport function setOrientation(value: string) {\r\n    localStorage.setItem(orientation, value);\r\n}\r\n\r\nexport function getShowBody() {\r\n    return getBool(showBody) ?? true;\r\n}\r\n\r\nexport function setShowBody(value) {\r\n    setBool(showBody, value);\r\n}\r\n\r\nexport function getSize() {\r\n    return getFloat(size) ?? 1;\r\n}\r\n\r\nexport function setSize(value) {\r\n    localStorage.setItem(size, value);\r\n}\r\n\r\nexport function getAnimateTurns() {\r\n    return getBool(animateTurns) ?? true;\r\n}\r\n\r\nexport function setAnimateTurns(value) {\r\n    setBool(animateTurns, value);\r\n}\r\n\r\nexport function getUserID() {\r\n    return getInt(userID);\r\n}\r\n\r\nexport function setUserID(value) {\r\n    localStorage.setItem(userID, value);\r\n}\r\n\r\nexport function getUser() {\r\n    return localStorage.getItem(user);\r\n}\r\n\r\nexport function removeUser() {\r\n    localStorage.removeItem(user);\r\n}\r\n\r\nexport function setUser(value) {\r\n    localStorage.setItem(user, value);\r\n}\r\n\r\n/**\r\n * Returns the current boolean associated with the given key, or defaultValue if the given key does not exist.\r\n */\r\nfunction getBool(key: string): boolean {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return value == \"1\";\r\n}\r\n\r\nfunction setBool(key: string, value: boolean) {\r\n    localStorage.setItem(key, value ? \"1\" : \"0\");\r\n}\r\n\r\n/**\r\n * Returns the current integer associated with the given key, or null if the given key does not exist.\r\n */\r\nfunction getInt(key: string) {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return parseInt(value);\r\n}\r\n\r\n/**\r\n * Returns the current float associated with the given key, or null if the given key does not exist.\r\n */\r\nfunction getFloat(key: string) {\r\n    const value = localStorage.getItem(key);\r\n    if (value === null) return null;\r\n    return parseFloat(value);\r\n}", "import { Buffers } from \"./buffers\";\r\nimport { Spring } from \"./common/spring\";\r\nimport { AnimationData, CubeLogic } from \"./cube\";\r\nimport { DragDetector } from \"./dragDetector\";\r\nimport * as glMat from \"./glMatrix\";\r\nimport * as store from \"./store\";\r\n\r\nexport let canvas: HTMLCanvasElement;\r\nexport let gl: WebGLRenderingContext;\r\n\r\nexport let buffers: Buffers;\r\nexport let cube: CubeLogic;\r\nexport let dragDetector: DragDetector;\r\n\r\nlet programInfo;\r\nlet transformMatrix;\r\n\r\nlet prefsLoaded = false;\r\nlet numLayers: number = 3;\r\nlet dragEnabled = true;\r\nlet spring = new Spring();\r\nlet isTurning = false;\r\nlet time = Date.now();\r\nlet animation: AnimationData;\r\n\r\n// Preferences stored locally\r\nlet sizeMultiplier: number;\r\nlet offsetSelection;\r\nexport let hintStickers;\r\nexport let showBody;\r\nexport let animateTurns;\r\n\r\nfunction loadPrefs() {\r\n    if (prefsLoaded) return;\r\n    prefsLoaded = true;\r\n    sizeMultiplier = store.getSize();\r\n    offsetSelection = store.getAngle();\r\n    hintStickers = store.getHintStickers();\r\n    showBody = store.getShowBody();\r\n    animateTurns = store.getAnimateTurns();\r\n}\r\n\r\nexport function setNumLayers(val: number) {\r\n    numLayers = val;\r\n    renderCanvas();\r\n}\r\n\r\nexport function setSizeMultiplier(val: number) {\r\n    sizeMultiplier = val;\r\n}\r\n\r\n/**\r\n * value = 0 --> left\r\n * value = 1 --> head-on\r\n * value = 2 --> right\r\n */\r\nexport function setAngleOffset(value: number) {\r\n    offsetSelection = value;\r\n    renderCanvas();\r\n}\r\n\r\nexport function setHintStickers(val: boolean) {\r\n    hintStickers = val;\r\n    render();\r\n}\r\n\r\nexport function setShowBody(val: boolean) {\r\n    showBody = val;\r\n    buffers.initBufferData(cube, showBody, transformMatrix);\r\n    render();\r\n}\r\n\r\nexport function setAnimateTurns(val: boolean) {\r\n    animateTurns = val;\r\n    cube.animateTurns = val;\r\n}\r\n\r\nexport function setDragEnabled(val: boolean) {\r\n    dragEnabled = val;\r\n}\r\n\r\nexport function animateTurn() {\r\n    // If the user has chosen not to animate turns, then just apply the turn\r\n    // instantly and redraw.\r\n    if (!animateTurns) {\r\n        cube.commitStickers();\r\n        drawScene();\r\n        return;\r\n    }\r\n\r\n    if (isTurning) {\r\n        return;\r\n    }\r\n\r\n    animation = cube.shiftAnimation();\r\n    if (animation) {\r\n        isTurning = true;\r\n        spring.position = 0;\r\n        time = Date.now();\r\n        render();\r\n    }\r\n}\r\n\r\nexport function render() {\r\n    if (numLayers === 0) {\r\n        renderZeroEasterEgg();\r\n        return;\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n        updateScene();\r\n        drawScene();\r\n    });\r\n}\r\n\r\nfunction updateScene() {\r\n    if (!isTurning) {\r\n        return\r\n    }\r\n    \r\n    const newTime = Date.now();\r\n    const dt = newTime - time;\r\n    time = newTime;\r\n\r\n    // target is measured in degrees\r\n    spring.target = (cube.animationQueue.length + 1) * 90;\r\n    spring.update(dt);\r\n\r\n    if (spring.position >= 90) {\r\n        cube.setAllAffectedStickers(false);\r\n        cube.commitStickers();\r\n        isTurning = false;\r\n        animateTurn();\r\n    }\r\n\r\n    render();\r\n}\r\n\r\nexport function renderCanvas() {\r\n    loadPrefs();\r\n\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.id = \"glCanvas\";\r\n\r\n    // Fixes formatting bug where there was extra space under canvas inside glDiv.\r\n    canvas.style.display = \"block\";\r\n\r\n    // We do not want the browser to cancel the pointer during pointermove events on the canvas.\r\n    // See here: https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event\r\n    canvas.style.touchAction = \"none\";\r\n\r\n    const baseSize = 320;\r\n    const size = baseSize * sizeMultiplier;\r\n    canvas.width = size;\r\n    canvas.height = size;\r\n\r\n    const glDiv = document.querySelector(\"#glDiv\");\r\n    glDiv.innerHTML = \"\";\r\n    glDiv.appendChild(canvas);\r\n\r\n    gl = canvas.getContext('webgl');\r\n\r\n    if (!gl) {\r\n        alert('Unable to initialize WebGL. Your browser or machine may not support it.');\r\n        return;\r\n    }\r\n\r\n    const xOpts = [35, 45, 35];\r\n    const yOpts = [-45, 0, 45];\r\n    let xAxis = xOpts[offsetSelection] * Math.PI / 180;\r\n    let yAxis = yOpts[offsetSelection] * Math.PI / 180;\r\n\r\n    transformMatrix = glMat.create();\r\n\r\n    glMat.perspective(transformMatrix,\r\n        50 * Math.PI / 180, // field of view\r\n        canvas.clientWidth / canvas.clientHeight, // aspect\r\n        0.1, // z near\r\n        100.0); // z far\r\n\r\n    glMat.translate(transformMatrix,\r\n        [0.0, 0.0, -5.0]);\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        xAxis,\r\n        [1, 0, 0],\r\n    );\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        yAxis,\r\n        [0, -1, 0],\r\n    );\r\n\r\n    buffers = new Buffers(gl);\r\n    cube = new CubeLogic(gl, animateTurns);\r\n    dragDetector = new DragDetector();\r\n\r\n    cube.setNumOfLayers(numLayers);\r\n    cube.activateAllStickers();\r\n    cube.new();\r\n\r\n    buffers.initBufferData(cube, showBody, transformMatrix);\r\n\r\n    const sceneArgs = { canvas, cube, buffers, offsetSelection, animateTurn };\r\n\r\n    const pointerdown = (offsetX, offsetY) => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerDown(offsetX, offsetY, sceneArgs);\r\n    }\r\n\r\n    const pointermove = (offsetX, offsetY) => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerMove(offsetX, offsetY);\r\n    }\r\n\r\n    const pointerup = () => {\r\n        if (!dragEnabled) return;\r\n        dragDetector.onPointerUp(sceneArgs);\r\n    }\r\n\r\n    const calcOffset = (event) => {\r\n        const rect = event.target.getBoundingClientRect();\r\n        const x = event.touches[0].pageX - rect.left;\r\n        const y = event.touches[0].pageY - rect.top;\r\n        return { x, y };\r\n    }\r\n\r\n    const addPointerListeners = () => {\r\n        canvas.addEventListener(\"pointerdown\", event => pointerdown(event.offsetX, event.offsetY));\r\n        canvas.addEventListener(\"pointermove\", event => pointermove(event.offsetX, event.offsetY));\r\n        canvas.addEventListener(\"pointerup\", event => pointerup());\r\n    }\r\n\r\n    const addTouchListeners = () => {\r\n        canvas.addEventListener(\"touchstart\", event => {\r\n            const { x, y } = calcOffset(event);\r\n            pointerdown(x, y);\r\n        });\r\n        canvas.addEventListener(\"touchmove\", event => {\r\n            const { x, y } = calcOffset(event);\r\n            pointermove(x, y);\r\n        });\r\n        canvas.addEventListener(\"touchend\", event => {\r\n            pointerup();\r\n        });\r\n    }\r\n\r\n    if (window.PointerEvent) {\r\n        addPointerListeners();\r\n    } else {\r\n        addTouchListeners();\r\n    }\r\n\r\n    initPrograms();\r\n    render();\r\n}\r\n\r\nexport function initPrograms() {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n    uniform mat4 uTransformMatrix;\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_Position = uTransformMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n    }\r\n    `;\r\n\r\n    // Fragment shader program\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_FragColor = vColor;\r\n    }\r\n    `;\r\n\r\n    // Initialize a shader program; this is where all the lighting\r\n    // for the vertices and so forth is established.\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    gl.useProgram(shaderProgram);\r\n\r\n    // Collect all the info needed to use the shader program.\r\n    // Look up which attributes our shader program is using\r\n    // for aVertexPosition, aVertexColor and also\r\n    // look up uniform locations.\r\n    programInfo = {\r\n        attribLocations: {\r\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n            vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor'),\r\n        },\r\n        uniformLocations: {\r\n            transformMatrix: gl.getUniformLocation(shaderProgram, 'uTransformMatrix'),\r\n        }\r\n    };\r\n}\r\n\r\nfunction bindPosition(positionBuffer) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        3, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n}\r\n\r\nfunction bindColor(colorBuffer) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        4, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n}\r\n\r\nfunction drawElements() {\r\n    gl.drawElements(\r\n        gl.TRIANGLES,\r\n        6,\r\n        gl.UNSIGNED_SHORT, // type\r\n        0, // offset\r\n    );\r\n}\r\n\r\nfunction drawScene() {\r\n    gl.clearDepth(1.0);                 // Clear everything\r\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    const underStickers = cube.getUnderStickers();\r\n    let listToShow = isTurning ? animation.stickers : cube.currentStickers;\r\n\r\n    for (let i = 0; i < cube.numOfStickers; i++) {\r\n        let object = buffers.objects[i];\r\n\r\n        // Matrix specific to this object\r\n        const m = glMat.create();\r\n        glMat.rotate(\r\n            m,\r\n            transformMatrix,\r\n            animation ? animation.stickersToAnimate[i] ? (spring.position * Math.PI / 180) : 0 : 0,\r\n            animation ? animation.axis : [1, 0, 0]\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            programInfo.uniformLocations.transformMatrix,\r\n            false,\r\n            m,\r\n        );\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\r\n\r\n        if (showBody) {\r\n            bindPosition(object.noGapPositionBuffer);\r\n            bindColor(underStickers[i].buffer);\r\n            drawElements();\r\n        }\r\n\r\n        bindPosition(object.positionBuffer);\r\n        bindColor(listToShow[i].buffer);\r\n        drawElements();\r\n\r\n        gl.uniformMatrix4fv(\r\n            programInfo.uniformLocations.transformMatrix,\r\n            false,\r\n            transformMatrix,\r\n        );\r\n    }\r\n\r\n    if (!hintStickers) return;\r\n    \r\n    gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.transformMatrix,\r\n        false,\r\n        transformMatrix,\r\n    );\r\n\r\n\r\n    const drawHints = (starti, endi) => {\r\n        for (let i = starti; i < endi; i++) {\r\n            let object = buffers.objects[i];\r\n    \r\n            bindPosition(object.hintPositionBuffer);\r\n            bindColor(listToShow[i].buffer);\r\n            drawElements();\r\n        }\r\n    }\r\n\r\n    if (offsetSelection === 0) {\r\n        drawHints(2 * cube.layersSq, 4 * cube.layersSq);\r\n        drawHints(5 * cube.layersSq, cube.numOfStickers);\r\n    } else if (offsetSelection === 1) {\r\n        drawHints(2 * cube.layersSq, cube.numOfStickers);\r\n    } else if (offsetSelection === 2) {\r\n        drawHints(2 * cube.layersSq, 5 * cube.layersSq);\r\n    }\r\n}\r\n\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n// Creates a shader of the given type, uploads the source and compiles it.\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction renderZeroEasterEgg() {\r\n    const glDiv = document.querySelector(\"#glDiv\");\r\n    glDiv.innerHTML = `\r\n    <div style=\"display: flex; justify-content: center; align-items: center; width: 320px; height: 320px;\">\r\n        <p style=\"color: white; text-align: center;\">You can try to solve a 0-layer cube, but that's kinda boring...</p>\r\n    </div>\r\n    `;\r\n}", "export function addListenersForLeftModal() {\r\n    const drawer = document.querySelector(\".slideRight\");\r\n    let isOpen = false;\r\n\r\n    function updateDrawer(open: boolean) {\r\n        isOpen = open;\r\n        if (isOpen) {\r\n            drawer.classList.add(\"slideRightOpen\");\r\n            return;\r\n        }\r\n        drawer.classList.remove(\"slideRightOpen\");\r\n    }\r\n\r\n    document.addEventListener(\"click\", event => {\r\n        const ele = event.target as HTMLElement;\r\n\r\n        if (ele === document.querySelector(\"#menu\")) {\r\n            updateDrawer(true);\r\n            return;\r\n        }\r\n\r\n        // Close if click outside of the drawer.\r\n        if (isOpen && !ele.closest(\".slideRight\")) {\r\n            updateDrawer(false);\r\n        }\r\n    });\r\n\r\n    document.querySelector(\"#closeMenu\").addEventListener(\"click\", () => {\r\n        updateDrawer(false);\r\n    });\r\n\r\n    document.querySelector(\"#learnButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"learn.html\";\r\n    });\r\n    document.querySelector(\"#playButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"play.html\";\r\n    });\r\n    document.querySelector(\"#trainButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"train.html\";\r\n    });\r\n    document.querySelector(\"#cubleButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"cuble.html\";\r\n    });\r\n}", "/**\r\n * 725 was chosen because 425 is the width of the main content and 300 is the width of the right panel.\r\n * 425 + 300 = 725\r\n */\r\nexport const NARROW = 725;\r\n\r\nlet opened = false;\r\n\r\nexport function open(ele: HTMLElement) {\r\n    opened = true;\r\n    ele.style.display = \"flex\";\r\n    ele.classList.add(\"slideLeftOpen\");\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n    } else {\r\n        ele.classList.remove(\"slideLeftClosed\");\r\n    }\r\n}\r\n\r\nexport function close(ele: HTMLElement) {\r\n    opened = false;\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n        ele.classList.remove(\"slideLeftOpen\");\r\n        ele.style.display = \"flex\";\r\n    } else {\r\n        ele.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport function toggle(ele: HTMLElement) {\r\n    if (opened) {\r\n        close(ele);\r\n    } else {\r\n        open(ele);\r\n    }\r\n}\r\n\r\nexport function renderHeader(title: string) {\r\n    return `\r\n    <div class=\"row\" style=\"justify-content: space-between; width: 100%; padding-bottom: 16px;\">\r\n        <p style=\"font-weight: bold; padding-right: 2rem;\">${title}</p>\r\n        <svg id=\"closeDrawer\" class=\"xButton\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"black\">\r\n            <path id=\"closeDrawer\" d=\"M 2 2 L 22 22 M 22 2 L 2 22\" stroke-width=\"2\" />\r\n        </svg>\r\n    </div>\r\n    `;\r\n}", "import * as scene from \"./scene\";\r\nimport { addListenersForLeftModal } from \"./ui\";\r\nimport { getAlgs, getOrientation, setAlgs, setOrientation } from \"./store\";\r\nimport * as slide from \"./slide\";\r\nimport { promoteAlg, demoteAlg } from \"./util\";\r\n\r\ntype TrainingAlg = { score: number, alg: string }\r\ntype AlgSet = { cube: string, name: string, algs: string[] };\r\n\r\nconst algData: AlgSet[] = require(\"./alg-data.json\");\r\n\r\n\r\ntype State =  {\r\n    solutionShown: boolean,\r\n    retried: boolean,\r\n    solved: boolean,\r\n    settingsOpen: boolean,\r\n    preRotation: string,\r\n    algSet: AlgSet,\r\n    algs: TrainingAlg[],\r\n    preAUF: string,\r\n    postAUF: string,\r\n}\r\n\r\nlet state: State = {\r\n    solutionShown: false,\r\n    retried: false,\r\n    solved: false,\r\n    settingsOpen: false,\r\n    preRotation: \"\",\r\n    algSet: null,\r\n    algs: [],\r\n    preAUF: \"\",\r\n    postAUF: \"\",\r\n};\r\n\r\nfunction applyPre(alg: string, auf: string): string {\r\n    if (auf) {\r\n        return `${auf} ${alg}`;\r\n    }\r\n    return alg;\r\n}\r\n\r\nfunction applyPost(alg: string, auf: string): string {\r\n    if (auf) {\r\n        return `${alg} ${auf}`;\r\n    }\r\n    return alg\r\n}\r\n\r\nfunction matching(stickers: any[], shouldMatch: number[][]): boolean {\r\n    for (let i = 0; i < shouldMatch.length; i++) {\r\n        const first = stickers[shouldMatch[i][0]].face;\r\n        for (let j = 1; j < shouldMatch[i].length; j++) {\r\n            if (first !== stickers[shouldMatch[i][j]].face) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction solved(stickers: any[], algSet: AlgSet): boolean {\r\n    switch (algSet.name) {\r\n        case \"CMLL\":\r\n            return matching(stickers, [\r\n                [0, 2, 6, 8],\r\n                [9, 15],\r\n                [29, 35],\r\n                [36, 42],\r\n                [45, 51],\r\n            ]);\r\n        case \"OLL\":\r\n            return matching(stickers, [\r\n                [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n                [10, 11, 13, 14, 16, 17],\r\n                [18, 19, 20, 21, 22, 23, 24, 25, 26],\r\n                [27, 28, 30, 31, 33, 34],\r\n                [37, 38, 40, 41, 43, 44],\r\n                [46, 47, 489, 50, 52, 53],\r\n            ]);\r\n        // PLL and ZBLL have same logic\r\n        case \"PLL\":\r\n        case \"ZBLL\":\r\n            return matching(stickers, [\r\n                [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n                [9, 12, 15],\r\n                [29, 32, 35],\r\n                [36, 39, 42],\r\n                [45, 48, 51],\r\n                [10, 11, 13, 14, 16, 17],\r\n                [18, 19, 20, 21, 22, 23, 24, 25, 26],\r\n                [27, 28, 30, 31, 33, 34],\r\n                [37, 38, 40, 41, 43, 44],\r\n                [46, 47, 49, 50, 52, 53],\r\n            ]);\r\n        // case \"2x2 CLL\":\r\n        // case \"2x2 EG1\":\r\n        // case \"2x2 EG2\":\r\n        default: \r\n            console.error(\"Not implemented yet:\", algSet.name);\r\n    }\r\n}\r\n\r\nfunction renderDrawer() {\r\n    const drawerEle: HTMLElement = document.querySelector(\"#rightDrawer\");\r\n    if (state.settingsOpen) {\r\n        const optionsData = [\r\n            { value: \"\", text: \"White Green\" },\r\n            { value: \"y'\", text: \"White Orange\" },\r\n            { value: \"y2\", text: \"White Blue\" },\r\n            { value: \"y\", text: \"White Red\" },\r\n            { value: \"z2\", text: \"Yellow Green\" },\r\n            { value: \"z2 y\", text: \"Yellow Orange\" },\r\n            { value: \"x2\", text: \"Yellow Blue\" },\r\n            { value: \"z2 y'\", text: \"Yellow Red\" },\r\n            { value: \"x y2\", text: \"Green White\" },\r\n            { value: \"x y\", text: \"Green Red\" },\r\n            { value: \"x\", text: \"Green Yellow\" },\r\n            { value: \"x y'\", text: \"Green Orange\" },\r\n            { value: \"x'\", text: \"Blue White\" },\r\n            { value: \"x' y\", text: \"Blue Red\" },\r\n            { value: \"x' y2\", text: \"Blue Yellow\" },\r\n            { value: \"x' y'\", text: \"Blue Orange\" },\r\n            { value: \"z y\", text: \"Orange White\" },\r\n            { value: \"z\", text: \"Orange Green\" },\r\n            { value: \"z y'\", text: \"Orange Yellow\" },\r\n            { value: \"z y2\", text: \"Orange Blue\" },\r\n            { value: \"z' y'\", text: \"Red White\" },\r\n            { value: \"z'\", text: \"Red Green\" },\r\n            { value: \"z' y\", text: \"Red Yellow\" },\r\n            { value: \"z' y2\", text: \"Red Blue\" },\r\n        ];\r\n        let optionsHTML = \"\";\r\n        optionsData.forEach(option => {\r\n            const selected = option.value === state.preRotation ? \"selected\" : \"\";\r\n            optionsHTML += `<option value=\"${option.value}\" ${selected}>${option.text}</option>`;\r\n        });\r\n        drawerEle.innerHTML = `\r\n        ${slide.renderHeader(\"Settings\")}\r\n        <p>Cube Orientation</p>\r\n        <select id=\"orientationSelect\">\r\n            ${optionsHTML}\r\n        </select>\r\n        `\r\n        ;\r\n        slide.open(drawerEle);\r\n    } else {\r\n        slide.close(drawerEle);\r\n    }\r\n}\r\n\r\nexport function main() {\r\n    // Initial canvas render\r\n    scene.renderCanvas();\r\n\r\n    addListenersForLeftModal();\r\n\r\n    document.addEventListener('keydown', (event) => {\r\n        if (event.key === \" \") {\r\n            // Prevent space from scrolling down\r\n            event.preventDefault();\r\n\r\n            showSolution();\r\n        } else if (event.key == \"Backspace\") {\r\n            retry();\r\n        } else if (event.key == \"Enter\") {\r\n            nextAlg();\r\n        } else if (scene.cube.matchKeyToTurn(event)) {\r\n            scene.animateTurn();\r\n            \r\n            if (solved(scene.cube.stickers, state.algSet)) {\r\n                showSolved();\r\n\r\n                state.solved = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    const algSetSelect = document.querySelector(\"#alg-set-select\");\r\n    algSetSelect.addEventListener(\"change\", (event) => {\r\n        const setName = (event.target as HTMLInputElement).value;\r\n        const algSet = findAlgSet(setName);\r\n        renderAlgSet(algSet);\r\n    });\r\n    algData.forEach(algSet => {\r\n        const option = document.createElement(\"option\");\r\n        option.textContent = algSet.name;\r\n        option.value = algSet.name;\r\n        algSetSelect.appendChild(option);\r\n    });\r\n\r\n\r\n    // Iterate 'algData' and find the desired set. \r\n    function findAlgSet(set: string) {\r\n        return algData.find(algSet => algSet.name === set);\r\n    }\r\n\r\n    function generateRandAUF() {\r\n        const options = [\"\", \"U\", \"U2\", \"U'\"];\r\n        return options[Math.floor(Math.random() * 4)];\r\n    }\r\n\r\n    function loadCurrAlg() {\r\n        hideSolution();\r\n\r\n        let alg = state.algs[0].alg;\r\n\r\n        state.preAUF = generateRandAUF();\r\n        alg = applyPre(alg, state.preAUF);\r\n\r\n        state.postAUF = generateRandAUF();\r\n        alg = applyPost(alg, state.postAUF);\r\n\r\n        scene.cube.new();\r\n\r\n        scene.cube.execAlg(state.preRotation);\r\n        \r\n        scene.cube.execAlgReverse(alg);\r\n        scene.cube.commitStickers();\r\n\r\n        scene.render();\r\n    }\r\n\r\n    function nextAlg() {\r\n        if (state.solutionShown || state.retried || !state.solved) {\r\n            demoteAlg(state.algs);\r\n        } else {\r\n            promoteAlg(state.algs);\r\n        }\r\n        setAlgs(state.algSet.name, state.algs);\r\n        state.solutionShown = false;\r\n        state.retried = false;\r\n        state.solved = false;\r\n        loadCurrAlg();\r\n    }\r\n\r\n    const solutionText: HTMLElement = document.querySelector(\"#solution-text\");\r\n    solutionText.addEventListener(\"click\", showSolution);\r\n    const toggleStyles = [\"hover:cursor-pointer\", \"hover:bg-neutral-800\", \"hover:bg-opacity-75\"]\r\n    function showSolution() {\r\n        state.solutionShown = true;\r\n\r\n        let alg = state.algs[0].alg;\r\n\r\n        alg = applyPre(alg, state.preAUF);\r\n\r\n        solutionText.textContent = alg;\r\n        solutionText.classList.remove(...toggleStyles);\r\n    }\r\n    function hideSolution() {\r\n        solutionText.textContent = \"Show solution\";\r\n        solutionText.classList.add(...toggleStyles);\r\n    }\r\n    function showSolved() {\r\n        solutionText.textContent = \"Solved!\";\r\n        solutionText.classList.remove(...toggleStyles);\r\n    }\r\n\r\n    function retry() {\r\n        state.retried = true;\r\n        loadCurrAlg();\r\n    }\r\n\r\n    function renderAlgSet(algSet: AlgSet) {\r\n        state.algSet = algSet;\r\n\r\n        if (algSet.cube == \"2x2\") {\r\n            scene.setNumLayers(2);\r\n        } else if (algSet.cube == \"3x3\") {\r\n            scene.setNumLayers(3);\r\n        }\r\n\r\n        // Remove elements from storedAlgs that are in storedAlgs but not in algs.\r\n        // Add elements to storedAlgs that are in algs but not in storedAlgs.\r\n        let storedAlgs: TrainingAlg[] = getAlgs(algSet.name);\r\n\r\n        storedAlgs = storedAlgs.filter(storedAlg => {\r\n            return algSet.algs.find(alg => storedAlg.alg === alg);\r\n        });\r\n        algSet.algs.forEach(alg => {\r\n            const found = storedAlgs.find(storedAlg => storedAlg.alg === alg);\r\n            if (!found) {\r\n                storedAlgs.push({ score: 0, alg });\r\n            }\r\n        });\r\n        state.algs = storedAlgs;\r\n\r\n        // When rendering an alg set, load the first alg automatically.\r\n        loadCurrAlg();\r\n    }\r\n\r\n    // Initial render\r\n    state.preRotation = getOrientation();\r\n    hideSolution();\r\n    renderAlgSet(algData[0]);\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n        renderDrawer();\r\n    });\r\n\r\n    document.addEventListener(\"click\", (event: MouseEvent) => {\r\n        const target = event.target as HTMLElement;\r\n        if (target.id === \"closeDrawer\") {\r\n            slide.close(document.querySelector(\"#rightDrawer\"));\r\n        } else if (target.id === \"next\") {\r\n            nextAlg();\r\n        } else if (target.id === \"trainSettingsButton\") {\r\n            state.settingsOpen = true;\r\n            renderDrawer();\r\n        } else if (target.id === \"try-again\") {\r\n            retry();\r\n        }\r\n    });\r\n\r\n    document.addEventListener(\"change\", (event) => {\r\n        const target = event.target as HTMLOptionElement;\r\n        if (target.id === \"orientationSelect\") {\r\n            state.preRotation = target.value;\r\n            loadCurrAlg();\r\n            setOrientation(target.value);\r\n        }\r\n    });\r\n}\r\n\r\nmain();"],
  "mappings": "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",
  "names": ["gl", "cube", "showBody", "transformMatrix", "a", "i", "algs", "cube", "animateTurns", "state", "move", "corners", "cube", "canvas", "buffers", "offsetSelection", "animateTurn", "f", "orientation", "orientation", "gl", "hintStickers", "showBody", "animateTurns", "animateTurns", "size", "gl", "showBody", "hintStickers", "open"]
}
