{
  "version": 3,
  "sources": ["../../src/scripts/colors.ts", "../../src/scripts/buffers.ts", "../../src/scripts/common/spring.ts", "../../src/scripts/pieceIndices.ts", "../../src/scripts/common/rand.ts", "../../src/scripts/util.ts", "../../src/scripts/scramble.ts", "../../src/scripts/cube.ts", "../../src/scripts/dragDetector.ts", "../../src/scripts/glMatrix.ts", "../../src/scripts/scene.ts", "../../src/scripts/ui.ts", "../../src/scripts/slide.ts", "../../src/scripts/learn.ts"],
  "sourcesContent": ["export const WHITE = [1.0, 1.0, 1.0, 1.0];\r\nexport const GRAY = [0.5, 0.5, 0.5, 1.0];\r\nexport const YELLOW = [1.0, 1.0, 0.0, 1.0];\r\nexport const DULL_YELLOW = [0.5, 0.5, 0.0, 1.0];\r\nexport const GREEN = [0.0, 1.0, 0.0, 1.0];\r\nexport const DULL_GREEN = [0.0, 0.5, 0.0, 1.0];\r\nexport const BLUE = [0.0, 0.0, 1.0, 1.0];\r\nexport const DULL_BLUE = [0.0, 0.0, 0.5, 1.0];\r\nexport const ORANGE = [1.0, 0.5, 0.0, 1.0];\r\nexport const DULL_ORANGE = [0.5, 0.25, 0.0, 1.0];\r\nexport const RED = [1.0, 0.0, 0.0, 1.0];\r\nexport const DULL_RED = [0.5, 0.0, 0.0, 1.0];\r\nexport const BLACK = [0.0, 0.0, 0.0, 1.0];", "import { CubeLogic } from \"./cube.js\";\r\n\r\nexport type BufferObject = {\r\n    positionBuffer: WebGLBuffer,\r\n    noGapPositionBuffer: WebGLBuffer,\r\n    hintPositionBuffer: WebGLBuffer,\r\n    indexBuffer: WebGLBuffer,\r\n    cart2d: number[],\r\n\r\n    // For debugging purposes\r\n    positions: number[],\r\n}\r\n\r\nexport function createBuffers(gl: WebGLRenderingContext, cube: CubeLogic, showBody: boolean, transformMatrix: number[]): BufferObject[] {\r\n    // Vertex positions with gap between stickers\r\n    let allPositions = showBody\r\n        ? _concatPositions(cube, 1.01, 0.02)\r\n        : _concatPositions(cube, 1.02, 0.04);\r\n\r\n    // Vertex positions with no gap so user can drag between stickers\r\n    let allNoGapPositions = _concatPositions(cube, 1.0, 0.0);\r\n\r\n    // Vertex positions of hint stickers\r\n    let allHintPositions = _concatPositions(cube, 1.5, 0.02);\r\n\r\n    const objects = Array(cube.numOfStickers);\r\n    for (let i = 0; i < cube.numOfStickers; i++) {\r\n        let object: BufferObject = {\r\n            positionBuffer: gl.createBuffer(),\r\n            noGapPositionBuffer: gl.createBuffer(),\r\n            hintPositionBuffer: gl.createBuffer(),\r\n            indexBuffer: gl.createBuffer(),\r\n            cart2d: [],\r\n            positions: null,\r\n        };\r\n\r\n        let positions = Array(12);\r\n        let noGapPos = Array(12);\r\n        let hintPos = Array(12);\r\n        for (let j = 0; j < 12; j++) {\r\n            let index = i * 12 + j;\r\n            positions[j] = allPositions[index];\r\n            noGapPos[j] = allNoGapPositions[index];\r\n            hintPos[j] = allHintPositions[index];\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, object.positionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n        object.positions = positions;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, object.noGapPositionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(noGapPos), gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, object.hintPositionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(hintPos), gl.STATIC_DRAW);\r\n\r\n        if (transformMatrix) {\r\n            // Represent as homogeneous coordinates\r\n            const homo = [\r\n                ...multiply(transformMatrix,\r\n                    [noGapPos[0], noGapPos[1], noGapPos[2], 1]),\r\n                ...multiply(transformMatrix,\r\n                    [noGapPos[3], noGapPos[4], noGapPos[5], 1]),\r\n                ...multiply(transformMatrix,\r\n                    [noGapPos[6], noGapPos[7], noGapPos[8], 1]),\r\n                ...multiply(transformMatrix,\r\n                    [noGapPos[9], noGapPos[10], noGapPos[11], 1]),\r\n            ];\r\n\r\n            // Represent as 2D cartesian coordinates by dividing x and y by w\r\n            object.cart2d = [\r\n                homo[0] / homo[3], homo[1] / homo[3],\r\n                homo[4] / homo[7], homo[5] / homo[7],\r\n                homo[8] / homo[11], homo[9] / homo[11],\r\n                homo[12] / homo[15], homo[13] / homo[15],\r\n            ];\r\n        }\r\n\r\n        // Define each face as two triangles.\r\n        // Given vertices A, B, C, and D, we define triangles ABC and ACD.\r\n        const indices = [0, 1, 2, 0, 2, 3];\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n        objects[i] = object;\r\n    }\r\n    \r\n    return objects;\r\n}\r\n\r\n/**\r\n * Multiply a 4x4 matrix with a 4x1 matrix, resulting in a 4x1 matrix.\r\n *\r\n * @param a first operand, 4x4 matrix\r\n * @param b second operand, 4x1 matrix\r\n * @returns out\r\n */\r\n function multiply(a, b) {\r\n    const out = Array(4);\r\n    let b0 = b[0],\r\n        b1 = b[1],\r\n        b2 = b[2],\r\n        b3 = b[3];\r\n    out[0] = b0 * a[0] + b1 * a[4] + b2 * a[8] + b3 * a[12];\r\n    out[1] = b0 * a[1] + b1 * a[5] + b2 * a[9] + b3 * a[13];\r\n    out[2] = b0 * a[2] + b1 * a[6] + b2 * a[10] + b3 * a[14];\r\n    out[3] = b0 * a[3] + b1 * a[7] + b2 * a[11] + b3 * a[15];\r\n    return out;\r\n}\r\n\r\nfunction _concatPositions(cube: CubeLogic, radius, gap) {\r\n    return [\r\n        ..._topFace(cube, 1, radius, gap),\r\n        ..._frontFace(cube, 0, radius, gap),\r\n        ..._bottomFace(cube, 1, -radius, gap),\r\n        ..._backFace(cube, 0, -radius, gap),\r\n        ..._leftFace(cube, 2, -radius, gap),\r\n        ..._rightFace(cube, 2, radius, gap),\r\n    ];\r\n}\r\n\r\n// Notes for face functions\r\n//\r\n// 0 3 6\r\n// 1 4 7\r\n// 2 5 8\r\n//\r\n// a (axis): 0, 1, or 2\r\n// n (negative): -1.0 or 1.0\r\n\r\nfunction _topFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = 0; i < cube.layers; i++) {\r\n            for (let j = 0; j < cube.layers; j++) {\r\n                const a = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = -cube.layersHalf; i <= cube.layersHalf; i++) {\r\n            for (let j = -cube.layersHalf; j <= cube.layersHalf; j++) {\r\n                coords.push([2.0 * j / cube.layers, 2.0 * i / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _frontFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = 0; i < cube.layers; i++) {\r\n            for (let j = cube.layers - 1; j >= 0; j--) {\r\n                const a = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = -cube.layersHalf; i <= cube.layersHalf; i++) {\r\n            for (let j = cube.layersHalf; j >= -cube.layersHalf; j--) {\r\n                coords.push([2.0 * i / cube.layers, 2.0 * j / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _bottomFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = 0; i < cube.layers; i++) {\r\n            for (let j = cube.layers - 1; j >= 0; j--) {\r\n                const a = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = -cube.layersHalf; i <= cube.layersHalf; i++) {\r\n            for (let j = cube.layersHalf; j >= -cube.layersHalf; j--) {\r\n                coords.push([2.0 * j / cube.layers, 2.0 * i / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _backFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = 0; i < cube.layers; i++) {\r\n            for (let j = 0; j < cube.layers; j++) {\r\n                const a = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = -cube.layersHalf; i <= cube.layersHalf; i++) {\r\n            for (let j = -cube.layersHalf; j <= cube.layersHalf; j++) {\r\n                coords.push([2.0 * i / cube.layers, 2.0 * j / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _leftFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = 0; i < cube.layers; i++) {\r\n            for (let j = cube.layers - 1; j >= 0; j--) {\r\n                const a = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = -cube.layersHalf; i <= cube.layersHalf; i++) {\r\n            for (let j = cube.layersHalf; j >= -cube.layersHalf; j--) {\r\n                coords.push([2.0 * j / cube.layers, 2.0 * i / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _rightFace(cube: CubeLogic, a, n, gap) {\r\n    let coords = [];\r\n\r\n    if (cube.layersEven) {\r\n        for (let i = cube.layers - 1; i >= 0; i--) {\r\n            for (let j = cube.layers - 1; j >= 0; j--) {\r\n                const a = -1 + 1 / cube.layers + j * 2 / cube.layers;\r\n                const b = -1 + 1 / cube.layers + i * 2 / cube.layers;\r\n                coords.push([a, b, n]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = cube.layersHalf; i >= -cube.layersHalf; i--) {\r\n            for (let j = cube.layersHalf; j >= -cube.layersHalf; j--) {\r\n                coords.push([2.0 * j / cube.layers, 2.0 * i / cube.layers, n]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return _concatStickers(cube, coords, a, gap);\r\n}\r\n\r\nfunction _concatStickers(cube: CubeLogic, coords, a, gap) {\r\n    let out = [];\r\n    for (let i = 0; i < cube.layersSq; i++) {\r\n        const temp = coords[i];\r\n        out = out.concat(_sticker(cube, a, temp[0], temp[1], temp[2], gap));\r\n    }\r\n    return out;\r\n}\r\n\r\nfunction _sticker(cube: CubeLogic, a, x, y, n, gap) {\r\n    // size\r\n    const s = (1.0 / cube.layers) - gap;\r\n\r\n    const coords = [\r\n        [x - s, y - s, n],\r\n        [x + s, y - s, n],\r\n        [x + s, y + s, n],\r\n        [x - s, y + s, n],\r\n    ];\r\n\r\n    let out = [];\r\n\r\n    const numOfVerticesInSquare = 4;\r\n    const numOfDimensions = 3;\r\n\r\n    for (let i = 0; i < numOfVerticesInSquare; i++) {\r\n        const temp = coords[i];\r\n        let appendage = [];\r\n        for (let i = 0; i < numOfDimensions; i++) {\r\n            appendage.push(temp[(a + i) % 3]);\r\n        }\r\n        out = out.concat(appendage);\r\n    }\r\n    return out;\r\n}", "// spring constant\r\nconst k = 100;\r\n\r\n// friction constant\r\nconst f = 15;\r\n\r\n/**\r\n * This class is used to animate a value from one state to another.\r\n * It is based on the spring physics model.\r\n */\r\nexport class Spring {\r\n    position: number;\r\n    _velocity: number;\r\n    _acceleration: number;\r\n\r\n    // set this to specify the target position\r\n    target: number;\r\n\r\n    constructor() {\r\n        this.position = 0;\r\n        this._velocity = 200;\r\n        this._acceleration = 0;\r\n\r\n        this.target = 0;\r\n    }\r\n\r\n    update(dt: number) {\r\n        const springF = -k * (this.position - this.target);\r\n        const dampingF = -f * this._velocity;\r\n\r\n        this._acceleration = springF + dampingF;\r\n\r\n        // v = v0 + at\r\n        this._velocity += this._acceleration * dt;\r\n\r\n        // x = x0 + vt\r\n        this.position += this._velocity * dt;\r\n    }\r\n}", "export const CENTERS = [4, 13, 22, 31, 40, 49];\r\nexport const UBL = [0, 29, 36];\r\nexport const URB = [6, 35, 51];\r\nexport const ULF = [2, 9, 42];\r\nexport const UFR = [8, 15, 45];\r\nexport const DFL = [18, 11, 44];\r\nexport const DRF = [24, 47, 17];\r\nexport const DLB = [20, 38, 27];\r\nexport const DBR = [26, 33, 53];\r\nexport const UB = [3, 32];\r\nexport const UL = [1, 39];\r\nexport const UR = [7, 48];\r\nexport const UF = [5, 12];\r\nexport const FL = [10, 43];\r\nexport const FR = [16, 46];\r\nexport const DF = [21, 14];\r\nexport const DL = [19, 41];\r\nexport const DR = [25, 50];\r\nexport const DB = [23, 30];\r\nexport const BL = [28, 37];\r\nexport const BR = [34, 52];\r\nexport const layer1Corners = [...UBL, ...URB, ...ULF, ...UFR];\r\nexport const layer2Corners = [...DFL, ...DRF, ...DLB, ...DBR];\r\nexport const layer1Edges = [...UB, ...UL, ...UR, ...UF];\r\nexport const layer2Edges = [...FL, ...FR, ...BL, ...BR];\r\nexport const layer3Edges = [...DF, ...DL, ...DR, ...DB];\r\nexport const cross = [...CENTERS, ...layer1Edges];\r\nexport const firstLayer = [...cross, ...layer1Corners];\r\nexport const f2l = [...firstLayer, ...layer2Edges];\r\nexport const lastLayer = [...layer3Edges, ...layer2Corners];\r\nexport const allPieces = [...f2l, ...lastLayer];", "/**\r\n * Returns a random integer in the range [0, int)\r\n */\r\nexport function randInt(int: number) {\r\n    return Math.floor(Math.random() * int);\r\n}", "import { randInt } from \"./common/rand\";\r\n\r\n/**\r\n * Fisher-Yates shuffle: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n * \r\n * Mutates original array and returns the shuffled array\r\n * \r\n * @param array \r\n * @returns shuffled array\r\n */\r\nexport function shuffle(array: any[]) {\r\n    let i = array.length;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (i != 0) {\r\n\r\n        // Pick a remaining element...\r\n        let r = randInt(i);\r\n        i--;\r\n\r\n        // And swap it with the current element.\r\n        let temp = array[r];\r\n        array[r] = array[i];\r\n        array[i] = temp;\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\n/**\r\n * Series produces 2, 5, 9, 14, 20, 27, 35, 44, 54, 65, 77, 80...\r\n */\r\n export function series(n: number) {\r\n    if (n <= 0) {\r\n        return 2;\r\n    }\r\n    return series(n - 1) + n + 2;\r\n}\r\n\r\ntype TrainingElement = {\r\n    alg: any\r\n    score: number,\r\n}\r\n\r\n/** Mutate algs in place */\r\nexport function promoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score++;\r\n    let position = series(algs[0].score);\r\n    const threeFourths = Math.ceil(algs.length * 3 / 4);\r\n    if (position > threeFourths) {\r\n        position = threeFourths + randInt(algs.length - threeFourths);\r\n    }\r\n    move(algs, position);\r\n}\r\n\r\nexport function demoteAlg(algs: Array<TrainingElement>) {\r\n    algs[0].score = 0;\r\n    move(algs, series(0));\r\n}\r\n\r\n/** Move the first element of arr to position n. Mutate arr in place */\r\nfunction move(arr: Array<any>, n: number) {\r\n    const temp = arr[0];\r\n    for (let i = 0; i < n; i++) {\r\n        arr[i] = arr[i + 1];\r\n    }\r\n    arr[n] = temp;\r\n}", "import { shuffle } from \"./util\";\r\nimport { randInt } from \"./common/rand\";\r\nimport { CubeLogic } from \"./cube\";\r\n\r\nconst U = 0;\r\nconst F = 1;\r\nconst D = 2;\r\nconst B = 3;\r\nconst L = 4;\r\nconst R = 5;\r\n\r\nconst corners = [\r\n    [U, B, L],\r\n    [U, R, B],\r\n    [U, L, F],\r\n    [U, F, R],\r\n    [D, F, L],\r\n    [D, R, F],\r\n    [D, L, B],\r\n    [D, B, R],\r\n];\r\nconst edges = [\r\n    [U, B],\r\n    [U, L],\r\n    [U, R],\r\n    [U, F],\r\n    [F, L],\r\n    [F, R],\r\n    [D, F],\r\n    [D, L],\r\n    [D, R],\r\n    [D, B],\r\n    [B, L],\r\n    [B, R],\r\n];\r\n\r\nexport function scramble3x3(cube: CubeLogic): number[] {\r\n    let eo = orientation(12, 2);\r\n    let co = orientation(8, 3);\r\n    let cp = permutation(8);\r\n    let ep = permutation(12);\r\n    while (permutationParity(cp) !== permutationParity(ep)) {\r\n        cp = permutation(8);\r\n    }\r\n\r\n\r\n    const stickers = Array(54);\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n        const center = cube.center(i);\r\n        stickers[center] = i;\r\n    }\r\n    \r\n    let uCorners = cube.corners(0, 0);\r\n    let fCorners = cube.corners(1, 0);\r\n    let dCorners = cube.corners(2, 0);\r\n    let bCorners = cube.corners(3, 0);\r\n    let lCorners = cube.corners(4, 0);\r\n    let rCorners = cube.corners(5, 0);\r\n\r\n    const fill4C = (cIndices, c1, c2, c3, c4, co1, co2, co3, co4) => {\r\n        /** ci is corner index, o is corner orientation */\r\n        const corner = (ci, o) => corners[cp[ci]][(co[ci] + o) % 3];\r\n        stickers[cIndices.topLeft] = corner(c1, co1);\r\n        stickers[cIndices.topRight] = corner(c2, co2);\r\n        stickers[cIndices.bottomLeft] = corner(c3, co3);\r\n        stickers[cIndices.bottomRight] = corner(c4, co4);\r\n    }\r\n\r\n    fill4C(uCorners, 0, 1, 2, 3, 0, 0, 0, 0);\r\n    fill4C(fCorners, 2, 3, 4, 5, 2, 1, 1, 2);\r\n    fill4C(dCorners, 4, 5, 6, 7, 0, 0, 0, 0);\r\n    fill4C(bCorners, 6, 7, 0, 1, 2, 1, 1, 2);\r\n    fill4C(lCorners, 0, 2, 6, 4, 2, 1, 1, 2);\r\n    fill4C(rCorners, 3, 1, 5, 7, 2, 1, 1, 2);\r\n\r\n    let uEdges = cube.edges(0, 0, 0);\r\n    let fEdges = cube.edges(1, 0, 0);\r\n    let dEdges = cube.edges(2, 0, 0);\r\n    let bEdges = cube.edges(3, 0, 0);\r\n    let lEdges = cube.edges(4, 0, 0);\r\n    let rEdges = cube.edges(5, 0, 0);\r\n\r\n    const fill4E = (eIndices, e1, e2, e3, e4, eo1, eo2, eo3, eo4) => {\r\n        /** ei is edge index, o is edge orientation */\r\n        const edge = (ei, o) => edges[ep[ei]][(eo[ei] + o) % 2];\r\n        stickers[eIndices.top] = edge(e1, eo1);\r\n        stickers[eIndices.left] = edge(e2, eo2);\r\n        stickers[eIndices.right] = edge(e3, eo3);\r\n        stickers[eIndices.bottom] = edge(e4, eo4);\r\n    }\r\n\r\n    fill4E(uEdges, 0, 1, 2, 3, 0, 0, 0, 0);\r\n    fill4E(fEdges, 3, 4, 5, 6, 1, 0, 0, 1);\r\n    fill4E(dEdges, 6, 7, 8, 9, 0, 0, 0, 0);\r\n    fill4E(bEdges, 9, 10, 11, 0, 1, 0, 0, 1);\r\n    fill4E(lEdges, 1, 10, 4, 7, 1, 1, 1, 1);\r\n    fill4E(rEdges, 2, 5, 11, 8, 1, 1, 1, 1);\r\n\r\n    return stickers;\r\n}\r\n\r\n/**\r\n * Returns an array of length `pieces`.\r\n * The contents of the array are numbers in the range [0, `orientations`).\r\n * The numbers in the array should sum to 0 mod `orientations`.\r\n */\r\nfunction orientation(pieces: number, orientations: number) {\r\n    const o: number[] = Array(pieces);\r\n    for (let i = 0; i < pieces; i++) {\r\n        o[i] = randInt(orientations);\r\n    }\r\n    while (!orientationValid(o, orientations)) {\r\n        const randPiece = randInt(pieces);\r\n        o[randPiece] = randInt(orientations);\r\n    }\r\n    return o;\r\n}\r\n\r\nfunction orientationValid(pieces: number[], orientations: number) {\r\n    let sum = 0;\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        sum += pieces[i];\r\n    }\r\n    return sum % orientations === 0;\r\n}\r\n\r\n/**\r\n * Returns 2 things: 1) an array of numbers spanning he range [0, pieces), in random order, \r\n * and 2) a boolean indicating whether an array of pieces has permutation parity.\r\n */\r\nfunction permutation(pieces: number) {\r\n    const p: number[] = Array(pieces);\r\n    for (let i = 0; i < pieces; i++) {\r\n        p[i] = i;\r\n    }\r\n    shuffle(p);\r\n    return p;\r\n}\r\n\r\n/**\r\n * Returns a boolean indicating whether an array of pieces has permutation parity.\r\n */\r\nfunction permutationParity(pieces: number[]) {\r\n    const cpy = [...pieces];\r\n    let parity = false;\r\n    while (true) {\r\n        if (cpy[0] === 0) {\r\n            const misplaced = cpy.findIndex((value, index) => value !== index);\r\n            if (misplaced === -1) {\r\n                return parity;\r\n            }\r\n            cpy[0] = cpy[misplaced];\r\n            cpy[misplaced] = 0;\r\n            parity = !parity;\r\n        } else {\r\n            const temp = cpy[0];\r\n            cpy[0] = cpy[temp];\r\n            cpy[temp] = temp;\r\n            parity = !parity;\r\n        }\r\n    }\r\n}", "import * as _colors from \"./colors\";\r\nimport * as pieceIndices from \"./pieceIndices\";\r\nimport { scramble3x3 } from \"./scramble\";\r\n\r\nlet gl;\r\n\r\nconst COLORS = [_colors.WHITE, _colors.GREEN, _colors.YELLOW, _colors.BLUE, _colors.ORANGE, _colors.RED];\r\n\r\nexport type AnimationData = {\r\n    /**\r\n     * List of length 3.\r\n     * One of the numbers must be -1 or 1, with the sign indicating clockwise or counterclockwise.\r\n     * The other two numbers are zero.\r\n     */\r\n    axis: number[];\r\n\r\n    stickers: any[];\r\n    stickersToAnimate: boolean[];\r\n}\r\n\r\ntype Sticker = {\r\n    /** rgba */\r\n    color: number[],\r\n    /**\r\n     * 0, 1, 2, 3, 4, 5, or 6. Indicates which face sticker belongs to.\r\n     */\r\n    face: number,\r\n    /** [r, g, b, a, r, g, b, a, r, g, b, a, r, g, b, a] */\r\n    arr: number[],\r\n    buffer: WebGLBuffer,\r\n}\r\n\r\nfunction makeSticker(color: number[], face: number): Sticker {\r\n    const arr = [\r\n        color[0], color[1], color[2], color[3],\r\n        color[0], color[1], color[2], color[3],\r\n        color[0], color[1], color[2], color[3],\r\n        color[0], color[1], color[2], color[3],\r\n    ];\r\n\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(arr), gl.STATIC_DRAW);\r\n\r\n    return {\r\n        color,\r\n        face,\r\n        arr,\r\n        buffer,\r\n    };\r\n}\r\n\r\nexport class CubeLogic {\r\n    axis: number;\r\n    stickers: any[];\r\n    underStickers: Sticker[];\r\n    hintStickers: Sticker[];\r\n    layers: number;\r\n    layersSq: number;\r\n    layersHalf: number;\r\n    layersEven: boolean;\r\n    numOfStickers: number;\r\n    currentStickers: Sticker[];\r\n    affectedStickers: boolean[];\r\n    disableTurn: boolean;\r\n    clockwise: boolean;\r\n    animationQueue: AnimationData[];\r\n    animateTurns: boolean;\r\n\r\n    constructor(_gl: WebGLRenderingContext, animateTurns: boolean) {\r\n        gl = _gl;\r\n\r\n        this.animationQueue = [];\r\n        this.animateTurns = animateTurns;\r\n    }\r\n\r\n    new() {\r\n        this.axis = 0;\r\n\r\n        const state = Array(this.numOfStickers);\r\n        this.underStickers = Array(this.numOfStickers);\r\n        this.hintStickers = Array(this.numOfStickers);\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            state[i] = Math.floor(i / this.layersSq);\r\n\r\n            // Pass in -1 for face because it shouldn't matter for the under stickers.\r\n            this.underStickers[i] = makeSticker(_colors.BLACK, -1);\r\n        }\r\n\r\n        this.affectedStickers = Array(this.numOfStickers).fill(false);\r\n    }\r\n\r\n    isSolved() {\r\n        let firstOnFace;\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            if (i % this.layersSq === 0) {\r\n                firstOnFace = this.stickers[i].face;\r\n                continue;\r\n            }\r\n            if (firstOnFace !== this.stickers[i].face) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setColors(colors: number[][]) {\r\n        this.stickers = [];\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            this.setColor(colors[i], i);\r\n        }\r\n    }\r\n\r\n    setColor(color: number[], stickerIndex: number) {\r\n        const sticker = makeSticker(color, Math.floor(stickerIndex / this.layersSq));\r\n        this.stickers[stickerIndex] = sticker;\r\n    }\r\n\r\n    scramble() {\r\n        if (this.layers === 3) {\r\n            this.scramble3x3();\r\n            return;\r\n        }\r\n        this.naiveScramble();\r\n    }\r\n\r\n    scramble3x3() {\r\n        const colors = scramble3x3(this);\r\n        this.setCubeState(colors);\r\n    }\r\n\r\n    /**\r\n     * Perform an imperfect scramble.\r\n     * I will eventually deprecate this, but this was easier to implement.\r\n     */\r\n    naiveScramble() {\r\n        let numTurns = this.layersSq * 10;\r\n        for (let i = 0; i < numTurns; i++) {\r\n            let axis = Math.floor(Math.random() * 3);\r\n            let layer = Math.floor(Math.random() * this.layers);\r\n            let clockwise = Math.floor(Math.random() * 1) == 0.0;\r\n            this._matchTurn(axis, layer, clockwise);\r\n        }\r\n\r\n        this.commitStickers();\r\n    }\r\n\r\n    cubleScramble() {\r\n        for (let i = 0; i < 54; i++) {\r\n            if (!pieceIndices.CENTERS.includes(i)) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.stickers[i].buffer);\r\n                const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(arr), gl.STATIC_DRAW); // consider making DYNAMIC_DRAW\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is used for the Cuble mini-game. This method should be called\r\n     * after each turn. When a sticker is turned to its correct face, its color is revealed.\r\n     */\r\n    revealCorrectStickers() {\r\n        for (let i = 0; i < 54; i++) {\r\n            if ((0 <= i && i <= 8 && this.stickers[i].color == this.stickers[4].color)\r\n                || (9 <= i && i <= 17 && this.stickers[i].color == this.stickers[13].color)\r\n                || (18 <= i && i <= 26 && this.stickers[i].color == this.stickers[22].color)\r\n                || (27 <= i && i <= 35 && this.stickers[i].color == this.stickers[31].color)\r\n                || (36 <= i && i <= 44 && this.stickers[i].color == this.stickers[40].color)\r\n                || (45 <= i && i <= 53 && this.stickers[i].color == this.stickers[49].color)) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.stickers[i].buffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.stickers[i].arr), gl.STATIC_DRAW);\r\n            }\r\n        }\r\n    }\r\n\r\n    setNumOfLayers(num: number) {\r\n        this.layers = num;\r\n        this.layersSq = num * num;\r\n        this.layersHalf = Math.floor(this.layers / 2);\r\n        this.layersEven = this.layers % 2 == 0;\r\n        this.numOfStickers = this.layersSq * 6;\r\n    }\r\n\r\n    /**\r\n     * Return a list of numbers representing the cube state. The list will \r\n     * contain integers 0-6, with each integer corresponding to a face's color.\r\n     * 0 -> top\r\n     * 1 -> front\r\n     * 2 -> bottom\r\n     * 3 -> back\r\n     * 4 -> left\r\n     * 5 -> right\r\n     */\r\n    getCubeState(): number[] {\r\n        return this.currentStickers.map(sticker => sticker.face);\r\n    }\r\n\r\n    setCubeState(state: number[]) {\r\n        this.stickers = Array(this.numOfStickers);\r\n        for (let i = 0; i < this.numOfStickers; i++) {\r\n            const color = COLORS[state[i]];\r\n            this.stickers[i] = makeSticker(color, state[i]);\r\n        }\r\n        this.commitStickers();\r\n    }\r\n\r\n    getStickers() {\r\n        return this.currentStickers;\r\n    }\r\n\r\n    /** \r\n     * Take the stickers that have been modified and transfer them to currentStickers \r\n    */\r\n    commitStickers() {\r\n        this.currentStickers = [...this.stickers];\r\n    }\r\n\r\n    resetAffectedStickers() {\r\n        // If numOfLayers === 1, make all stickers true, because everything\r\n        // should be affected for 1x1.\r\n        this.affectedStickers = Array(this.numOfStickers).fill(this.layers === 1);\r\n    }\r\n\r\n    pushAnimation(axis, clockwise, prevStickers) {\r\n        if (!this.animateTurns) return;\r\n\r\n        let x = clockwise ? -1 : 1;\r\n        let rotationAxis = [0, 0, 0];\r\n        rotationAxis[axis] = x;\r\n\r\n        this.animationQueue.push({\r\n            axis: rotationAxis,\r\n            stickers: prevStickers,\r\n            stickersToAnimate: this.affectedStickers,\r\n        });\r\n    }\r\n\r\n    turn(axis, layer, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        this._matchTurn(axis, layer, clockwise);\r\n    }\r\n\r\n    sliceTurn(axis, clockwise) {\r\n        this.affectedStickers = Array(this.numOfStickers).fill(false);\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        for (let i = 1; i < this.layers - 1; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n    }\r\n\r\n    wideTurn(axis, layer, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        this._matchTurn(axis, layer, clockwise);\r\n        for (let i = 1; i < this.layers - 1; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n\r\n    }\r\n\r\n    cubeRotate(axis, clockwise) {\r\n        this.resetAffectedStickers();\r\n\r\n        this.pushAnimation(axis, clockwise, [...this.stickers]);\r\n\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._matchTurn(axis, i, clockwise);\r\n        }\r\n    }\r\n\r\n    _matchTurn(axis, layer, clockwise) {\r\n        if (axis == 0) {\r\n            this._turnXAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(5, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(4, !clockwise);\r\n            }\r\n        } else if (axis == 1) {\r\n            this._turnYAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(0, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(2, !clockwise);\r\n            }\r\n        } else if (axis == 2) {\r\n            this._turnZAxis(layer, clockwise);\r\n            if (layer == 0) {\r\n                this._turnOuter(1, clockwise);\r\n            } else if (layer == this.layers - 1) {\r\n                this._turnOuter(3, !clockwise);\r\n            }\r\n        } else {\r\n            console.error(`Axis ${axis} not recognized`);\r\n        }\r\n    }\r\n\r\n    _turnXAxis(layer, clockwise) {\r\n        for (let i = 1; i <= this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                0 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                3 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                2 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n                1 * this.layersSq + this.layersSq - i - layer * this.layers,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnYAxis(layer, clockwise) {\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                1 * this.layersSq + i * this.layers + layer,\r\n                4 * this.layersSq + i * this.layers + layer,\r\n                3 * this.layersSq + (this.layers - i - 1) * this.layers + (this.layers - 1) - layer,\r\n                5 * this.layersSq + i * this.layers + layer,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnZAxis(layer, clockwise) {\r\n        for (let i = 0; i < this.layers; i++) {\r\n            this._cycle(\r\n                clockwise,\r\n                0 * this.layersSq + (i + 1) * this.layers - 1 - layer,\r\n                5 * this.layersSq + i + this.layers * layer,\r\n                2 * this.layersSq + (this.layers - i - 1) * this.layers + layer,\r\n                4 * this.layersSq + this.layersSq - (i + 1) - layer * this.layers,\r\n            );\r\n        }\r\n    }\r\n\r\n    _turnOuter(face, clockwise) {\r\n        if (this.layers % 2 != 0) {\r\n            let center = this.center(face);\r\n            this.affectedStickers[center] = true;\r\n        }\r\n\r\n        for (let i = 0; i < Math.floor(this.layers / 2); i++) {\r\n            const { topLeft, topRight, bottomLeft, bottomRight } = this.corners(face, i);\r\n\r\n            this._cycle(clockwise, topLeft, topRight, bottomRight, bottomLeft);\r\n\r\n            let numEdges = this.layers - 2 * (i + 1);\r\n            for (let j = 0; j < numEdges; j++) {\r\n                const { top, left, bottom, right } = this.edges(face, i, j);\r\n                this._cycle(clockwise, top, right, bottom, left);\r\n            }\r\n        }\r\n    }\r\n\r\n    _cycle(clockwise, i1, i2, i3, i4) {\r\n        this.affectedStickers[i1] = true;\r\n        this.affectedStickers[i2] = true;\r\n        this.affectedStickers[i3] = true;\r\n        this.affectedStickers[i4] = true;\r\n\r\n        if (clockwise) {\r\n            this._cycleHelper(i1, i2, i3, i4);\r\n        } else {\r\n            this._cycleHelper(i4, i3, i2, i1);\r\n        }\r\n    }\r\n\r\n    _cycleHelper(i1, i2, i3, i4) {\r\n        let temp = this.stickers[i4];\r\n        this.stickers[i4] = this.stickers[i3];\r\n        this.stickers[i3] = this.stickers[i2];\r\n        this.stickers[i2] = this.stickers[i1];\r\n        this.stickers[i1] = temp;\r\n    }\r\n\r\n    /**\r\n     * Why use KeyboardEvent.code instead of KeyboardEvent.key?\r\n     * 1) `key` is dependent on \"the state of modifier keys such as Shift as well as the keyboard locale and layout.\"\r\n     * 2) `code` is useful when you want to handle keys based on their physical positions. This is common for games.\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\r\n     */\r\n    matchKeyToTurn(event: KeyboardEvent) {\r\n        if (this.disableTurn) return;\r\n\r\n        // Don't turn if the user is holding down ctrl\r\n        // E.g., the user might be using Ctrl + Shift + R to refresh the page or Ctrl + Shift + I to open the dev tools\r\n        if (event.ctrlKey) return;\r\n\r\n        const code = event.code;\r\n\r\n        switch (code) {\r\n            case \"KeyN\":\r\n                this.cubeRotate(0, true);\r\n                return { notation: \"x\", rotate: true };\r\n            case \"KeyB\":\r\n                this.cubeRotate(0, false);\r\n                return { notation: \"x'\", rotate: true };\r\n            case \"Semicolon\":\r\n                this.cubeRotate(1, true);\r\n                return { notation: \"y\", rotate: true };\r\n            case \"KeyA\":\r\n                this.cubeRotate(1, false);\r\n                return { notation: \"y'\", rotate: true };\r\n            case \"KeyP\":\r\n                this.cubeRotate(2, true);\r\n                return { notation: \"z\", rotate: true };\r\n            case \"KeyQ\":\r\n                this.cubeRotate(2, false);\r\n                return { notation: \"z'\", rotate: true };\r\n            case \"KeyJ\":\r\n                this.turn(1, 0, true);\r\n                return { notation: \"U\", turn: true };\r\n            case \"KeyF\":\r\n                this.turn(1, 0, false);\r\n                return { notation: \"U'\", turn: true };\r\n            case \"KeyS\":\r\n                this.turn(1, this.layers - 1, false);\r\n                return { notation: \"D\", turn: true };\r\n            case \"KeyL\":\r\n                this.turn(1, this.layers - 1, true);\r\n                return { notation: \"D'\", turn: true };\r\n            case \"KeyH\":\r\n                this.turn(2, 0, true);\r\n                return { notation: \"F\", turn: true };\r\n            case \"KeyG\":\r\n                this.turn(2, 0, false);\r\n                return { notation: \"F'\", turn: true };\r\n            case \"KeyW\":\r\n                this.turn(2, this.layers - 1, false);\r\n                return { notation: \"B\", turn: true };\r\n            case \"KeyO\":\r\n                this.turn(2, this.layers - 1, true);\r\n                return { notation: \"B'\", turn: true };\r\n            case \"KeyD\":\r\n                this.turn(0, this.layers - 1, false);\r\n                return { notation: \"L\", turn: true };\r\n            case \"KeyE\":\r\n                this.turn(0, this.layers - 1, true);\r\n                return { notation: \"L'\", turn: true };\r\n            case \"KeyI\":\r\n                this.turn(0, 0, true);\r\n                return { notation: \"R\", turn: true };\r\n            case \"KeyK\":\r\n                this.turn(0, 0, false);\r\n                return { notation: \"R'\", turn: true };\r\n            case \"BracketLeft\":\r\n                this.sliceTurn(0, false);\r\n                return { notation: \"M\", turn: true };\r\n            case \"Quote\":\r\n                this.sliceTurn(0, true);\r\n                return { notation: \"M'\", turn: true };\r\n            case \"KeyC\":\r\n                this.sliceTurn(1, false);\r\n                return { notation: \"E\", turn: true };\r\n            case \"Comma\":\r\n                this.sliceTurn(1, true);\r\n                return { notation: \"E'\", turn: true };\r\n            case \"KeyY\":\r\n                this.sliceTurn(2, true);\r\n                return { notation: \"S\", turn: true };\r\n            case \"KeyT\":\r\n                this.sliceTurn(2, false);\r\n                return { notation: \"S'\", turn: true };\r\n            case \"KeyU\":\r\n                this.wideTurn(0, 0, true);\r\n                return { notation: \"r\", turn: true };\r\n            case \"KeyM\":\r\n                this.wideTurn(0, 0, false);\r\n                return { notation: \"r'\", turn: true };\r\n            case \"KeyV\":\r\n                this.wideTurn(0, this.layers - 1, false);\r\n                return { notation: \"l\", turn: true };\r\n            case \"KeyR\":\r\n                this.wideTurn(0, this.layers - 1, true);\r\n                return { notation: \"l'\", turn: true };\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    stepAlgorithm(move: string, forward: boolean) {\r\n        switch (move) {\r\n            case \"x\":\r\n                this.cubeRotate(0, forward);\r\n                break;\r\n            case \"x'\":\r\n                this.cubeRotate(0, !forward);\r\n                break;\r\n            case \"x2\":\r\n                this.cubeRotate(0, forward);\r\n                this.cubeRotate(0, forward);\r\n                break;\r\n            case \"y\":\r\n                this.cubeRotate(1, forward);\r\n                break;\r\n            case \"y'\":\r\n                this.cubeRotate(1, !forward);\r\n                break;\r\n            case \"y2\":\r\n                this.cubeRotate(1, forward);\r\n                this.cubeRotate(1, forward);\r\n                break;\r\n            case \"z\":\r\n                this.cubeRotate(2, forward);\r\n                break;\r\n            case \"z'\":\r\n                this.cubeRotate(2, !forward);\r\n                break;\r\n            case \"z2\":\r\n                this.cubeRotate(2, forward);\r\n                this.cubeRotate(2, forward);\r\n                break;\r\n            case \"U\":\r\n                this.turn(1, 0, forward);\r\n                break;\r\n            case \"U'\":\r\n                this.turn(1, 0, !forward);\r\n                break;\r\n            case \"U2\":\r\n            case \"U2'\":\r\n                this.turn(1, 0, forward);\r\n                this.turn(1, 0, forward);\r\n                break;\r\n            case \"D\":\r\n                this.turn(1, this.layers - 1, !forward);\r\n                break;\r\n            case \"D'\":\r\n                this.turn(1, this.layers - 1, forward);\r\n                break;\r\n            case \"D2\":\r\n                this.turn(1, this.layers - 1, forward);\r\n                this.turn(1, this.layers - 1, forward);\r\n                break;\r\n            case \"F\":\r\n                this.turn(2, 0, forward);\r\n                break;\r\n            case \"F'\":\r\n                this.turn(2, 0, !forward);\r\n                break;\r\n            case \"F2\":\r\n                this.turn(2, 0, forward);\r\n                this.turn(2, 0, forward);\r\n                break;\r\n            case \"B\":\r\n                this.turn(2, this.layers - 1, !forward);\r\n                break;\r\n            case \"B'\":\r\n                this.turn(2, this.layers - 1, forward);\r\n                break\r\n            case \"B2\":\r\n                this.turn(2, this.layers - 1, forward);\r\n                this.turn(2, this.layers - 1, forward);\r\n                break\r\n            case \"L\":\r\n                this.turn(0, this.layers - 1, !forward);\r\n                break;\r\n            case \"L'\":\r\n                this.turn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"L2\":\r\n                this.turn(0, this.layers - 1, forward);\r\n                this.turn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"l\":\r\n                this.wideTurn(0, this.layers - 1, !forward);\r\n                break;\r\n            case \"l'\":\r\n                this.wideTurn(0, this.layers - 1, forward);\r\n                break;\r\n            case \"R\":\r\n                this.turn(0, 0, forward);\r\n                break;\r\n            case \"R'\":\r\n                this.turn(0, 0, !forward);\r\n                break;\r\n            case \"R2\":\r\n            case \"R2'\":\r\n                this.turn(0, 0, forward);\r\n                this.turn(0, 0, forward);\r\n                break;\r\n            case \"r\":\r\n                this.wideTurn(0, 0, forward);\r\n                break;\r\n            case \"r'\":\r\n                this.wideTurn(0, 0, !forward);\r\n                break;\r\n            case \"r2\":\r\n            case \"r2'\":\r\n                this.wideTurn(0, 0, forward);\r\n                this.wideTurn(0, 0, forward);\r\n                break;\r\n            case \"M\":\r\n                this.turn(0, 1, !forward);\r\n                break;\r\n            case \"M'\":\r\n                this.turn(0, 1, forward);\r\n                break;\r\n            case \"M2\":\r\n                this.sliceTurn(0, forward);\r\n                this.sliceTurn(0, forward);\r\n                break;\r\n            case \"E\":\r\n                this.sliceTurn(1, !forward);\r\n                break;\r\n            case \"E'\":\r\n                this.sliceTurn(1, forward);\r\n                break;\r\n            case \"S\":\r\n                this.sliceTurn(2, forward);\r\n                break;\r\n            case \"S'\":\r\n                this.sliceTurn(2, !forward);\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid turn in algorithm: \" + move);\r\n        }\r\n    }\r\n\r\n    execAlg(alg: string) {\r\n        if (!alg) return;\r\n\r\n        let moves = alg.split(\" \");\r\n        for (let i = 0; i < moves.length; i++) {\r\n            this.stepAlgorithm(moves[i], true);\r\n        }\r\n\r\n        // Clear the animation queue so that all the turns don't get animated\r\n        this.animationQueue = [];\r\n    }\r\n\r\n    execAlgReverse(alg: string) {\r\n        if (!alg) return;\r\n\r\n        let moves = alg.split(\" \");\r\n        for (let i = moves.length - 1; i >= 0; i--) {\r\n            this.stepAlgorithm(moves[i], false);\r\n        }\r\n\r\n        // Clear the animation queue so that all the turns don't get animated\r\n        this.animationQueue = [];\r\n    }\r\n\r\n    stickerIsOnFace(sticker: number, face: number) {\r\n        return face * this.layersSq <= sticker && sticker < (face + 1) * this.layersSq;\r\n    }\r\n\r\n    center(face: number) {\r\n        return face * this.layersSq + Math.floor(this.layersSq / 2);\r\n    }\r\n\r\n    corners(face: number, layer: number) {\r\n        const offset = face * this.layersSq;\r\n        return {\r\n            topLeft: offset + (this.layers + 1) * layer,\r\n            topRight: offset + (this.layers - 1) * (this.layers - layer),\r\n            bottomRight: offset + (this.layers + 1) * (this.layers - layer - 1),\r\n            bottomLeft: offset + (this.layers - 1) * (layer + 1),\r\n        };\r\n    }\r\n\r\n    edges(face: number, corner: number, edge: number) {\r\n        const corners = this.corners(face, corner);\r\n        let numEdges = this.layers - 2 * (corner + 1);\r\n        return {\r\n            top: corners.topLeft + this.layers * (edge + 1),\r\n            left: corners.topLeft + (numEdges - edge),\r\n            right: corners.topRight + edge + 1,\r\n            bottom: corners.bottomLeft + this.layers * (numEdges - edge),\r\n        };\r\n    }\r\n}\r\n\r\n/** Returns colors for a solved cube */\r\nexport function solvedColors(cube: CubeLogic): number[][] {\r\n    const colors = Array(54); // hardcoded because we are using a 3x3x3 cube\r\n\r\n    // Fill in the active stickers with bright colors\r\n    let brights = [_colors.WHITE, _colors.GREEN, _colors.YELLOW, _colors.BLUE, _colors.ORANGE, _colors.RED];\r\n    for (let i = 0; i < cube.numOfStickers; i++) {\r\n        colors[i] = brights[Math.floor(i / cube.layersSq)];\r\n    }\r\n\r\n    return colors;\r\n}", "import { BufferObject } from \"./buffers\";\r\nimport { CubeLogic } from \"./cube\";\r\n\r\n/**\r\n * Translate coordinate from pixels (relative to canvas) to clipping space\r\n */\r\nfunction xPixelToClip(val: number, canvasSize: number) {\r\n    return val / canvasSize * 2 - 1;\r\n}\r\n\r\n/**\r\n * Translate coordinate from pixels (relative to canvas) to clipping space\r\n */\r\nfunction yPixelToClip(val: number, canvasSize: number) {\r\n    return 1 - val / canvasSize * 2;\r\n}\r\n\r\nfunction calcSlope(x1: number, y1: number, x2: number, y2: number) {\r\n    if (x1 < x2) {\r\n        return (y2 - y1) / (x2 - x1);\r\n    }\r\n    return (y1 - y2) / (x1 - x2);\r\n}\r\n\r\nfunction areaTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\r\n    return Math.abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));\r\n}\r\n\r\nfunction topRow(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - sticker % cube.layers;\r\n}\r\n\r\nfunction topColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor(sticker / cube.layers);\r\n}\r\n\r\nfunction frontRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction frontColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor((sticker - cube.layersSq) / cube.layers);\r\n}\r\n\r\nfunction leftRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction leftColumn(cube: CubeLogic, sticker: number) {\r\n    return cube.layers - 1 - Math.floor((sticker - 4 * cube.layersSq) / cube.layers);\r\n}\r\n\r\nfunction rightRow(cube: CubeLogic, sticker: number) {\r\n    return sticker % cube.layers;\r\n}\r\n\r\nfunction rightColumn(cube: CubeLogic, sticker: number) {\r\n    return Math.floor((sticker - 5 * cube.layersSq) / cube.layers);\r\n}\r\n\r\ntype SceneArgsType = { canvas: any, cube: any, buffers: any, offsetSelection: any, animateTurn: any };\r\n\r\nexport class DragDetector {\r\n    numOfPointerMoves: number;\r\n    xOnDown: number;\r\n    yOnDown: number;\r\n    xOnMove: number;\r\n    yOnMove: number;\r\n    stickerOnDown: number;\r\n    cart2dOnDown: number[];\r\n\r\n    /**\r\n     * x and y are pixel values.\r\n     */\r\n    onPointerDown(x: number, y: number, sceneArgs: SceneArgsType) {\r\n        const { canvas, cube, buffers, offsetSelection, animateTurn } = sceneArgs;\r\n\r\n        this.numOfPointerMoves = 0;\r\n\r\n        const clipX = xPixelToClip(x, canvas.width);\r\n        const clipY = yPixelToClip(y, canvas.width);\r\n        this.xOnDown = clipX;\r\n        this.yOnDown = clipY;\r\n\r\n        [this.stickerOnDown, this.cart2dOnDown] = this._coordinatesToSticker(clipX, clipY, cube, buffers, offsetSelection);\r\n\r\n        const objects = buffers.objects;\r\n        const getXY = (objectIndex, xIndex, yIndex) => ({\r\n            x: objects[objectIndex].cart2d[xIndex],\r\n            y: objects[objectIndex].cart2d[yIndex],\r\n        });\r\n\r\n        if (this.stickerOnDown === -1) {\r\n            if (offsetSelection === 0) {\r\n                const top = getXY(cube.layers * (cube.layers - 1), 6, 7);\r\n                const topLeft = getXY(0, 0, 1);\r\n                const bottomLeft = getXY(cube.layers * (2 * cube.layers + 1), 0, 1);\r\n                if (clipY > topLeft.y) {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(0, true);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(2, true);\r\n                        animateTurn();\r\n                    }\r\n                } else if (clipY > bottomLeft.y) {\r\n                    cube.cubeRotate(1, clipX < bottomLeft.x);\r\n                    animateTurn();\r\n                } else {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(2, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(0, false);\r\n                        animateTurn();\r\n                    }\r\n                }\r\n            } else if (offsetSelection === 1) {\r\n                const topLeft = getXY(0, 0, 1);\r\n                const topRight = getXY(cube.layers * (cube.layers - 1), 6, 7);\r\n                const left = getXY(cube.layers - 1, 2, 3);\r\n                const right = getXY(cube.layersSq - 1, 4, 5);\r\n                const bottomLeft = getXY(cube.layers * (cube.layers + 1) - 1, 0, 1);\r\n                const bottomRight = getXY(cube.layersSq * 2 - 1, 2, 3);\r\n                if (clipY > topLeft.y && clipX > topLeft.x && clipX < topRight.x) {\r\n                    cube.cubeRotate(0, true);\r\n                    animateTurn();\r\n                } else if (clipX < topLeft.x && clipY > left.y && clipY < topLeft.y) {\r\n                    cube.cubeRotate(2, false);\r\n                    animateTurn();\r\n                } else if (clipX > topRight.x && clipY > right.y && clipY < topRight.y) {\r\n                    cube.cubeRotate(2, true);\r\n                    animateTurn();\r\n                } else if (clipX < bottomLeft.x && clipY > bottomLeft.y && clipY < left.y) {\r\n                    cube.cubeRotate(1, true);\r\n                    animateTurn();\r\n                } else if (clipX > bottomRight.x && clipY > bottomRight.y && clipY < right.y) {\r\n                    cube.cubeRotate(1, false);\r\n                    animateTurn();\r\n                } else if (clipY < bottomLeft.y && clipX > bottomLeft.x && clipX < bottomRight.x) {\r\n                    cube.cubeRotate(0, false);\r\n                    animateTurn();\r\n                }\r\n            } else if (offsetSelection === 2) {\r\n                const top = getXY(0, 0, 1);\r\n                const topLeft = getXY(cube.layers - 1, 2, 3);\r\n                const bottomLeft = getXY(cube.layers * (cube.layers + 1) - 1, 0, 1);\r\n                if (clipY > topLeft.y) {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(2, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(0, true);\r\n                        animateTurn();\r\n                    }\r\n                } else if (clipY > bottomLeft.y) {\r\n                    cube.cubeRotate(1, clipX < bottomLeft.x);\r\n                    animateTurn();\r\n                } else {\r\n                    if (clipX < top.x) {\r\n                        cube.cubeRotate(0, false);\r\n                        animateTurn();\r\n                    } else if (clipX > top.x) {\r\n                        cube.cubeRotate(2, true);\r\n                        animateTurn();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * x and y are pixel values.\r\n     */\r\n    onPointerMove(x: number, y: number) {\r\n        this.numOfPointerMoves++;\r\n        this.xOnMove = x;\r\n        this.yOnMove = y;\r\n    }\r\n\r\n    onPointerUp(sceneArgs: SceneArgsType) {\r\n        // Do nothing if the pointer movement was tiny.\r\n        if (this.numOfPointerMoves < 2) return;\r\n\r\n        const { canvas, cube, buffers, offsetSelection, animateTurn } = sceneArgs;\r\n\r\n        let posSlope, negSlope;\r\n        if (this.stickerOnDown !== -1) {\r\n            posSlope = calcSlope(this.cart2dOnDown[0], this.cart2dOnDown[1], this.cart2dOnDown[4], this.cart2dOnDown[5]);\r\n            negSlope = calcSlope(this.cart2dOnDown[2], this.cart2dOnDown[3], this.cart2dOnDown[6], this.cart2dOnDown[7]);\r\n            if (posSlope < 0) {\r\n                const temp = posSlope;\r\n                posSlope = negSlope;\r\n                negSlope = temp;\r\n            }\r\n        }\r\n\r\n        const xClip = xPixelToClip(this.xOnMove, canvas.width);\r\n        const yClip = yPixelToClip(this.yOnMove, canvas.width);\r\n\r\n        const slope = calcSlope(xClip, yClip, this.xOnDown, this.yOnDown);\r\n\r\n        const [stickerOnUp, _] = this._coordinatesToSticker(xClip, yClip, cube, buffers, offsetSelection);\r\n\r\n        if (offsetSelection === 0) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 4)) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), false);\r\n                } else if (slope < 0) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), this.xOnDown > xClip);\r\n                } else {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 4)) {\r\n                    cube.turn(1, frontRow(cube, this.stickerOnDown), true);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 4)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(2, leftColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(1, leftRow(cube, this.stickerOnDown), false);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(2, leftColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(2, leftColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(2, leftColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, leftRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        } else if (offsetSelection === 1) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (xClip === this.xOnDown) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, topColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, topColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(2, topRow(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        } else if (offsetSelection === 2) {\r\n            if (cube.stickerIsOnFace(this.stickerOnDown, 0)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 5)) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), true);\r\n                } else if (slope < 0) {\r\n                    cube.turn(2, topRow(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                } else {\r\n                    cube.turn(0, topColumn(cube, this.stickerOnDown), this.xOnDown < xClip);\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 1)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), true);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 5)) {\r\n                    cube.turn(1, frontRow(cube, this.stickerOnDown), false);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(0, frontColumn(cube, this.stickerOnDown), yClip > this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(0, frontColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, frontRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            } else if (cube.stickerIsOnFace(this.stickerOnDown, 5)) {\r\n                if (cube.stickerIsOnFace(stickerOnUp, 0)) {\r\n                    cube.turn(2, rightColumn(cube, this.stickerOnDown), false);\r\n                } else if (cube.stickerIsOnFace(stickerOnUp, 1)) {\r\n                    cube.turn(1, rightRow(cube, this.stickerOnDown), true);\r\n                } else if (xClip === this.xOnDown) {\r\n                    cube.turn(2, rightColumn(cube, this.stickerOnDown), yClip < this.yOnDown);\r\n                } else {\r\n                    if (slope > posSlope) {\r\n                        cube.turn(2, rightColumn(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    } else if (slope < negSlope) {\r\n                        cube.turn(2, rightColumn(cube, this.stickerOnDown), xClip > this.xOnDown);\r\n                    } else {\r\n                        cube.turn(1, rightRow(cube, this.stickerOnDown), xClip < this.xOnDown);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        animateTurn();\r\n    }\r\n\r\n    /**\r\n     * Find the sticker with cart2d that contains this coordinate.\r\n     * Return -1 if it's not in any sticker.\r\n     */\r\n    _coordinatesToSticker(x: number, y: number, cube: CubeLogic, buffers: BufferObject[], offsetSelection: number) {\r\n        const coordinateIsInSticker = i => {\r\n            if (!buffers[i].cart2d) return;\r\n            const cart2d = buffers[i].cart2d;\r\n            // Determine if coordinate is in convex quadrilateral\r\n            const areaQuadrilateral = areaTriangle(cart2d[0], cart2d[1], cart2d[2], cart2d[3], cart2d[4], cart2d[5])\r\n                + areaTriangle(cart2d[0], cart2d[1], cart2d[4], cart2d[5], cart2d[6], cart2d[7]);\r\n            const sumAreaTriangles = areaTriangle(x, y, cart2d[0], cart2d[1], cart2d[2], cart2d[3])\r\n                + areaTriangle(x, y, cart2d[2], cart2d[3], cart2d[4], cart2d[5])\r\n                + areaTriangle(x, y, cart2d[4], cart2d[5], cart2d[6], cart2d[7])\r\n                + areaTriangle(x, y, cart2d[6], cart2d[7], cart2d[0], cart2d[1]);\r\n            const EPSILON = 0.00001;\r\n            if (Math.abs(areaQuadrilateral - sumAreaTriangles) < EPSILON) {\r\n                // This means the coordinate is in the convex quadrilateral!\r\n                return [\r\n                    i,\r\n                    cart2d,\r\n                ];\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        for (let i = 0; i < 2 * cube.layersSq; i++) {\r\n            const output = coordinateIsInSticker(i);\r\n            if (output) return output;\r\n        }\r\n\r\n        if (offsetSelection === 1) return [-1, undefined];\r\n\r\n        if (offsetSelection === 0) {\r\n            for (let i = 4 * cube.layersSq; i < 5 * cube.layersSq; i++) {\r\n                const output = coordinateIsInSticker(i);\r\n                if (output) return output;\r\n            }\r\n        }\r\n\r\n        if (offsetSelection === 2) {\r\n            for (let i = 5 * cube.layersSq; i < 6 * cube.layersSq; i++) {\r\n                const output = coordinateIsInSticker(i);\r\n                if (output) return output;\r\n            }\r\n        }\r\n\r\n        return [-1, undefined];\r\n    }\r\n}", "/**\r\n * This file contains matrix operations for webgl.\r\n */\r\n\r\n/** Create and return an identity 4x4 matrix */\r\nexport function create() {\r\n    return [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n    ];\r\n}\r\n\r\n/** Copy contents of `a` into `b` */\r\nexport function copy(a, b) {\r\n    b[0] = a[0];\r\n    b[1] = a[1];\r\n    b[2] = a[2];\r\n    b[3] = a[3];\r\n    b[4] = a[4];\r\n    b[5] = a[5];\r\n    b[6] = a[6];\r\n    b[7] = a[7];\r\n    b[8] = a[8];\r\n    b[9] = a[9];\r\n    b[10] = a[10];\r\n    b[11] = a[11];\r\n    b[12] = a[12];\r\n    b[13] = a[13];\r\n    b[14] = a[14];\r\n    b[15] = a[15];\r\n    return b;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param out 4x4 frustum matrix that will be written to\r\n * @param fovy Vertical field of view in radians\r\n * @param aspect Aspect ratio. typically viewport width/height\r\n * @param near Near bound of the frustum\r\n * @param far Far bound of the frustum, can be null or Infinity\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n    const f = 1.0 / Math.tan(fovy / 2);\r\n    out[0] = f / aspect;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[5] = f;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = -1;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[15] = 0;\r\n\r\n    if (far != null && far !== Infinity) {\r\n        const nf = 1 / (near - far);\r\n        out[10] = (far + near) * nf;\r\n        out[14] = 2 * far * near * nf;\r\n    } else {\r\n        out[10] = -1;\r\n        out[14] = -2 * near;\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * Rotate a 4x4 matrix\r\n *\r\n * @param out destination matrix\r\n * @param a matrix to rotate\r\n * @param rad angle to rotate the matrix by\r\n * @param axis axis to rotate around\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n    let x = axis[0],\r\n        y = axis[1],\r\n        z = axis[2],\r\n        len = 1 / Math.hypot(x, y, z);\r\n\r\n    x *= len;\r\n    y *= len;\r\n    z *= len;\r\n\r\n    let s = Math.sin(rad),\r\n        c = Math.cos(rad),\r\n        t = 1 - c,\r\n        a00 = a[0],\r\n        a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3],\r\n        a10 = a[4],\r\n        a11 = a[5],\r\n        a12 = a[6],\r\n        a13 = a[7],\r\n        a20 = a[8],\r\n        a21 = a[9],\r\n        a22 = a[10],\r\n        a23 = a[11],\r\n        b00 = x * x * t + c,\r\n        b01 = y * x * t + z * s,\r\n        b02 = z * x * t - y * s,\r\n        b10 = x * y * t - z * s,\r\n        b11 = y * y * t + c,\r\n        b12 = z * y * t + x * s,\r\n        b20 = x * z * t + y * s,\r\n        b21 = y * z * t - x * s,\r\n        b22 = z * z * t + c;\r\n\r\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n    // If the source and destination differ, copy the unchanged last row\r\n    if (a !== out) {\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param m source and destination matrix\r\n * @param v vector to translate by\r\n */\r\nexport function translate(m, v) {\r\n    let x = v[0],\r\n        y = v[1],\r\n        z = v[2];\r\n\r\n    m[12] += m[0] * x + m[4] * y + m[7] * z;\r\n    m[13] += m[1] * x + m[5] * y + m[8] * z;\r\n    m[14] += m[2] * x + m[5] * y + m[9] * z;\r\n    m[15] += m[3] * x + m[6] * y + m[10] * z;\r\n    return m;\r\n}", "import { BufferObject, createBuffers } from \"./buffers\";\r\nimport { Spring } from \"./common/spring\";\r\nimport { CubeLogic } from \"./cube\";\r\nimport { DragDetector } from \"./dragDetector\";\r\nimport * as glMat from \"./glMatrix\";\r\nimport * as store from \"./store\";\r\n\r\nlet canvas: HTMLCanvasElement = document.querySelector(\"canvas\");\r\nlet gl: WebGLRenderingContext = canvas.getContext(\"webgl\");\r\n\r\ntype ProgramInfo = {\r\n    attribLocations: {\r\n        vertexPosition: number,\r\n        vertexColor: number,\r\n    },\r\n    uniformLocations: {\r\n        transformMatrix: WebGLUniformLocation,\r\n    },\r\n};\r\n\r\nlet programInfo: ProgramInfo = initPrograms();\r\n\r\nexport type Scene = {\r\n    div: HTMLElement,\r\n    cube: CubeLogic,\r\n    spring: Spring,\r\n    buffers: BufferObject[],\r\n    transformMatrix: number[],\r\n    dragDetector: DragDetector,\r\n};\r\nlet scenes: Scene[] = [];\r\n\r\nlet time: number = Date.now() * 0.001;\r\n\r\nlet prefsLoaded = false;\r\nlet numLayers: number = 3;\r\nlet dragEnabled = true;\r\n\r\n// Preferences stored locally\r\nlet sizeMultiplier: number;\r\nlet offsetSelection = 1;\r\nexport let hintStickers = true;\r\nexport let showBody = true;\r\nexport let animateTurns = true;\r\n\r\nlet loopStarted = false;\r\nexport function startLoop() {\r\n    if (loopStarted) return;\r\n    loopStarted = true;\r\n    requestAnimationFrame(render);\r\n}\r\n\r\nfunction loadPrefs() {\r\n    if (prefsLoaded) return;\r\n    prefsLoaded = true;\r\n    sizeMultiplier = store.getSize();\r\n    offsetSelection = store.getAngle();\r\n    hintStickers = store.getHintStickers();\r\n    showBody = store.getShowBody();\r\n    animateTurns = store.getAnimateTurns();\r\n}\r\n\r\nexport function setNumLayers(val: number) {\r\n    numLayers = val;\r\n    // renderCanvas();\r\n    // TODO\r\n}\r\n\r\nexport function setSizeMultiplier(val: number) {\r\n    sizeMultiplier = val;\r\n}\r\n\r\n/**\r\n * value = 0 --> left\r\n * value = 1 --> head-on\r\n * value = 2 --> right\r\n */\r\nexport function setAngleOffset(value: number) {\r\n    offsetSelection = value;\r\n    // renderCanvas();\r\n    // TODO\r\n}\r\n\r\nexport function setHintStickers(val: boolean) {\r\n    hintStickers = val;\r\n    // render(null, null); // TODO\r\n}\r\n\r\nexport function setShowBody(val: boolean) {\r\n    showBody = val;\r\n    // buffers.initBufferData(cube, showBody, transformMatrix);\r\n    // render(null); // TODO\r\n}\r\n\r\nexport function setAnimateTurns(val: boolean) {\r\n    animateTurns = val;\r\n    // cube.animateTurns = val;\r\n}\r\n\r\nexport function setDragEnabled(val: boolean) {\r\n    dragEnabled = val;\r\n}\r\n\r\nexport function newScene(selector: string): Scene {\r\n    let div = document.querySelector(selector) as HTMLElement;\r\n    let cube = new CubeLogic(gl, true);\r\n    let spring = new Spring();\r\n    let transformMatrix = initTransform(div);\r\n    let dragDetector = new DragDetector();\r\n    \r\n    cube.setNumOfLayers(numLayers);\r\n    cube.new();\r\n\r\n    let buffers = createBuffers(gl, cube, true, transformMatrix);\r\n\r\n    let sceneObj = {\r\n        div,\r\n        cube,\r\n        spring,\r\n        buffers,\r\n        transformMatrix,\r\n        dragDetector,\r\n    };\r\n    scenes.push(sceneObj);\r\n    return sceneObj;\r\n\r\n    // const sceneArgs = {\r\n    //     canvas: this.div,\r\n    //     cube: this.cube,\r\n    //     buffers: this.buffers,\r\n    //     offsetSelection,\r\n    //     animateTurn: this.animateTurn,\r\n    // };\r\n\r\n    // const pointerdown = (offsetX, offsetY) => {\r\n    //     if (!dragEnabled) return;\r\n    //     this.dragDetector.onPointerDown(offsetX, offsetY, sceneArgs);\r\n    // }\r\n\r\n    // const pointermove = (offsetX, offsetY) => {\r\n    //     if (!dragEnabled) return;\r\n    //     this.dragDetector.onPointerMove(offsetX, offsetY);\r\n    // }\r\n\r\n    // const pointerup = () => {\r\n    //     if (!dragEnabled) return;\r\n    //     this.dragDetector.onPointerUp(sceneArgs);\r\n    // }\r\n\r\n    // const calcOffset = (event) => {\r\n    //     const rect = event.target.getBoundingClientRect();\r\n    //     const x = event.touches[0].pageX - rect.left;\r\n    //     const y = event.touches[0].pageY - rect.top;\r\n    //     return { x, y };\r\n    // }\r\n\r\n    // const addPointerListeners = () => {\r\n    //     this.div.addEventListener(\"pointerdown\", event => pointerdown(event.offsetX, event.offsetY));\r\n    //     this.div.addEventListener(\"pointermove\", event => pointermove(event.offsetX, event.offsetY));\r\n    //     this.div.addEventListener(\"pointerup\", event => pointerup());\r\n    // }\r\n\r\n    // const addTouchListeners = () => {\r\n    //     this.div.addEventListener(\"touchstart\", event => {\r\n    //         const { x, y } = calcOffset(event);\r\n    //         pointerdown(x, y);\r\n    //     });\r\n    //     this.div.addEventListener(\"touchmove\", event => {\r\n    //         const { x, y } = calcOffset(event);\r\n    //         pointermove(x, y);\r\n    //     });\r\n    //     this.div.addEventListener(\"touchend\", event => {\r\n    //         pointerup();\r\n    //     });\r\n    // }\r\n\r\n    // if (window.PointerEvent) {\r\n    //     addPointerListeners();\r\n    // } else {\r\n    //     addTouchListeners();\r\n    // }\r\n}\r\n\r\nfunction initPrograms() {\r\n    const vertexShaderSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n    uniform mat4 uTransformMatrix;\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_Position = uTransformMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n    }\r\n    `;\r\n\r\n    const fragmentShaderSource = `\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n        gl_FragColor = vColor;\r\n    }\r\n    `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vertexShaderSource, fragmentShaderSource);\r\n\r\n    gl.useProgram(shaderProgram);\r\n\r\n    return {\r\n        attribLocations: {\r\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n            vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor'),\r\n        },\r\n        uniformLocations: {\r\n            transformMatrix: gl.getUniformLocation(shaderProgram, 'uTransformMatrix'),\r\n        }\r\n    }\r\n}\r\n\r\nfunction initTransform(element: HTMLElement) {\r\n    const xOpts = [35, 45, 35];\r\n    const yOpts = [-45, 0, 45];\r\n    let xAxis = xOpts[offsetSelection] * Math.PI / 180;\r\n    let yAxis = yOpts[offsetSelection] * Math.PI / 180;\r\n\r\n    let transformMatrix = glMat.create();\r\n\r\n    glMat.perspective(transformMatrix,\r\n        50 * Math.PI / 180, // field of view\r\n        element.clientWidth / element.clientHeight, // aspect\r\n        0.1, // z near\r\n        100.0); // z far\r\n\r\n    glMat.translate(transformMatrix,\r\n        [0.0, 0.0, -5.0]);\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        xAxis,\r\n        [1, 0, 0],\r\n    );\r\n\r\n    glMat.rotate(transformMatrix,\r\n        transformMatrix,\r\n        yAxis,\r\n        [0, -1, 0],\r\n    );\r\n\r\n    return transformMatrix;\r\n}\r\n\r\nfunction bindPosition(positionBuffer: WebGLBuffer, programInfo: ProgramInfo, gl: WebGLRenderingContext) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        3, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n}\r\n\r\nfunction bindColor(colorBuffer: WebGLBuffer, programInfo: ProgramInfo, gl: WebGLRenderingContext) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        4, // size\r\n        gl.FLOAT, // type\r\n        false, // normalize\r\n        0, // stride\r\n        0); // offset\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n}\r\n\r\nfunction drawElements(gl: WebGLRenderingContext) {\r\n    gl.drawElements(\r\n        gl.TRIANGLES,\r\n        6,\r\n        gl.UNSIGNED_SHORT, // type\r\n        0, // offset\r\n    );\r\n}\r\n\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n// Creates a shader of the given type, uploads the source and compiles it.\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize() {\r\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n    const displayWidth = canvas.clientWidth;\r\n    const displayHeight = canvas.clientHeight;\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width !== displayWidth ||\r\n        canvas.height !== displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n    }\r\n\r\n    return needResize;\r\n}\r\n\r\nfunction render(newTime: number) {\r\n    newTime *= 0.001; // convert to seconds\r\n    const dt = newTime - time;\r\n    time = newTime;\r\n\r\n    resizeCanvasToDisplaySize();\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.SCISSOR_TEST);\r\n    gl.depthFunc(gl.LEQUAL); // Near things obscure far things\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // move the canvas to top of the current scroll position\r\n    canvas.style.transform = `translateY(${window.scrollY}px)`;\r\n\r\n    for (let i = 0; i < scenes.length; i++) {\r\n        const { cube, div, spring, buffers, transformMatrix, dragDetector } = scenes[i];\r\n\r\n        const rect = div.getBoundingClientRect();\r\n        if (rect.bottom < 0 || rect.top > canvas.clientHeight ||\r\n            rect.right < 0 || rect.left > canvas.clientWidth) {\r\n            continue;  // it's off screen\r\n        }\r\n\r\n        const width = rect.right - rect.left;\r\n        const height = rect.bottom - rect.top;\r\n        const left = rect.left;\r\n        const bottom = canvas.clientHeight - rect.bottom;\r\n\r\n        gl.viewport(left, bottom, width, height);\r\n        gl.scissor(left, bottom, width, height);\r\n\r\n        if (cube.animationQueue[0]) {\r\n            // target is measured in degrees\r\n            spring.target = cube.animationQueue.length * 90;\r\n            spring.update(dt);\r\n\r\n            if (spring.position >= 90) {\r\n                cube.affectedStickers = Array(cube.numOfStickers).fill(false);\r\n\r\n                cube.commitStickers();\r\n                spring.position = 0;\r\n                cube.animationQueue.shift();\r\n            }\r\n        }\r\n\r\n        const animation = cube.animationQueue[0];\r\n        let listToShow = animation ? animation.stickers : cube.stickers;\r\n\r\n        const underStickers = cube.underStickers;\r\n\r\n        for (let i = 0; i < cube.numOfStickers; i++) {\r\n            let object = buffers[i];\r\n\r\n            const m = (animation && animation.stickersToAnimate[i])\r\n                ? glMat.rotate(\r\n                    glMat.create(),\r\n                    transformMatrix,\r\n                    spring.position * Math.PI / 180,\r\n                    animation.axis\r\n                )\r\n                : transformMatrix;\r\n\r\n            gl.uniformMatrix4fv(\r\n                programInfo.uniformLocations.transformMatrix,\r\n                false,\r\n                m,\r\n            );\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\r\n\r\n            if (showBody) {\r\n                bindPosition(object.noGapPositionBuffer, programInfo, gl);\r\n                bindColor(underStickers[i].buffer, programInfo, gl);\r\n                drawElements(gl);\r\n            }\r\n\r\n            bindPosition(object.positionBuffer, programInfo, gl);\r\n            bindColor(listToShow[i].buffer, programInfo, gl);\r\n            drawElements(gl);\r\n        }\r\n\r\n        if (hintStickers) {\r\n            gl.uniformMatrix4fv(\r\n                programInfo.uniformLocations.transformMatrix,\r\n                false,\r\n                transformMatrix,\r\n            );\r\n\r\n            const drawHints = (starti, endi) => {\r\n                for (let j = starti; j < endi; j++) {\r\n                    let object = buffers[j];\r\n\r\n                    bindPosition(object.hintPositionBuffer, programInfo, gl);\r\n                    bindColor(listToShow[j].buffer, programInfo, gl);\r\n                    drawElements(gl);\r\n                }\r\n            }\r\n\r\n            if (offsetSelection === 0) {\r\n                drawHints(2 * cube.layersSq, 4 * cube.layersSq);\r\n                drawHints(5 * cube.layersSq, cube.numOfStickers);\r\n            } else if (offsetSelection === 1) {\r\n                drawHints(2 * cube.layersSq, cube.numOfStickers);\r\n            } else if (offsetSelection === 2) {\r\n                drawHints(2 * cube.layersSq, 5 * cube.layersSq);\r\n            }\r\n        }\r\n    }\r\n\r\n    requestAnimationFrame(render);\r\n}\r\n\r\nfunction renderZeroEasterEgg() {\r\n    const glDiv = document.querySelector(\"#glDiv\");\r\n    glDiv.innerHTML = `\r\n    <div style=\"display: flex; justify-content: center; align-items: center; width: 320px; height: 320px;\">\r\n        <p style=\"color: white; text-align: center;\">You can try to solve a 0-layer cube, but that's kinda boring...</p>\r\n    </div>\r\n    `;\r\n}", "export function addListenersForLeftModal() {\r\n    const drawer = document.querySelector(\".slideRight\");\r\n    let isOpen = false;\r\n\r\n    function updateDrawer(open: boolean) {\r\n        isOpen = open;\r\n        if (isOpen) {\r\n            drawer.classList.add(\"slideRightOpen\");\r\n            return;\r\n        }\r\n        drawer.classList.remove(\"slideRightOpen\");\r\n    }\r\n\r\n    document.addEventListener(\"click\", event => {\r\n        const ele = event.target as HTMLElement;\r\n\r\n        if (ele === document.querySelector(\"#menu\")) {\r\n            updateDrawer(true);\r\n            return;\r\n        }\r\n\r\n        // Close if click outside of the drawer.\r\n        if (isOpen && !ele.closest(\".slideRight\")) {\r\n            updateDrawer(false);\r\n        }\r\n    });\r\n\r\n    document.querySelector(\"#closeMenu\").addEventListener(\"click\", () => {\r\n        updateDrawer(false);\r\n    });\r\n\r\n    document.querySelector(\"#learnButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"learn.html\";\r\n    });\r\n    document.querySelector(\"#playButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"play.html\";\r\n    });\r\n    document.querySelector(\"#trainButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"train.html\";\r\n    });\r\n    document.querySelector(\"#cubleButton\").addEventListener(\"click\", () => {\r\n        document.location.href = \"cuble.html\";\r\n    });\r\n}", "/**\r\n * 725 was chosen because 425 is the width of the main content and 300 is the width of the right panel.\r\n * 425 + 300 = 725\r\n */\r\nexport const NARROW = 725;\r\n\r\nlet opened = false;\r\n\r\nexport function open(ele: HTMLElement) {\r\n    opened = true;\r\n    ele.style.display = \"flex\";\r\n    ele.classList.add(\"slideLeftOpen\");\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n    } else {\r\n        ele.classList.remove(\"slideLeftClosed\");\r\n    }\r\n}\r\n\r\nexport function close(ele: HTMLElement) {\r\n    opened = false;\r\n    if (document.documentElement.clientWidth < NARROW) {\r\n        ele.classList.add(\"slideLeftClosed\");\r\n        ele.classList.remove(\"slideLeftOpen\");\r\n        ele.style.display = \"flex\";\r\n    } else {\r\n        ele.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport function toggle(ele: HTMLElement) {\r\n    if (opened) {\r\n        close(ele);\r\n    } else {\r\n        open(ele);\r\n    }\r\n}\r\n\r\nexport function renderHeader(title: string) {\r\n    return `\r\n    <div class=\"row\" style=\"justify-content: space-between; width: 100%; padding-bottom: 16px;\">\r\n        <p style=\"font-weight: bold; padding-right: 2rem;\">${title}</p>\r\n        <svg id=\"closeDrawer\" class=\"xButton\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"black\">\r\n            <path id=\"closeDrawer\" d=\"M 2 2 L 22 22 M 22 2 L 2 22\" stroke-width=\"2\" />\r\n        </svg>\r\n    </div>\r\n    `;\r\n}", "import * as _colors from \"./colors\";\r\nimport { newScene, startLoop } from \"./scene\";\r\nimport { addListenersForLeftModal } from \"./ui\";\r\nimport * as slide from \"./slide\";\r\nimport { CubeLogic } from \"./cube\";\r\nimport * as pieceIndices from \"./pieceIndices\";\r\n\r\nfunction parseMovesFromAlg(alg?: string): string[] {\r\n    return (alg || \"\").split(\" \");\r\n}\r\n\r\nfunction main() {\r\n    addListenersForLeftModal();\r\n\r\n    interface Lesson {\r\n        setup: string,\r\n        algorithm: string,\r\n        activeStickers: number[],\r\n        cube?: CubeLogic,\r\n        move: number,\r\n    }\r\n\r\n    const lessons: Lesson[] = [\r\n        {\r\n            setup: \"\",\r\n            algorithm: \"x x x x y y y y\",\r\n            activeStickers: pieceIndices.CENTERS,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"\",\r\n            algorithm: \"x x x x y y y y\",\r\n            activeStickers: [...pieceIndices.layer1Corners, ...pieceIndices.layer2Corners],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"\",\r\n            algorithm: \"x x x x y y y y\",\r\n            activeStickers: [...pieceIndices.layer1Edges, ...pieceIndices.layer2Edges, ...pieceIndices.layer3Edges],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F'\",\r\n            algorithm: \"y y y y\",\r\n            activeStickers: pieceIndices.cross,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F D y x\",\r\n            algorithm: \"x' y' D' F F\",\r\n            activeStickers: pieceIndices.cross,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L R' D' R F'\",\r\n            algorithm: \"R' D' R F F\",\r\n            activeStickers: pieceIndices.cross,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L R' D' R F' F'\",\r\n            algorithm: \"F\",\r\n            activeStickers: pieceIndices.cross,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L R' D' R\",\r\n            algorithm: \"F'\",\r\n            activeStickers: pieceIndices.cross,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z\",\r\n            algorithm: \"U'\",\r\n            activeStickers: [...pieceIndices.cross, ...pieceIndices.ULF],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z L' U U L\",\r\n            algorithm: \"R U R' U'\",\r\n            activeStickers: [...pieceIndices.cross, ...pieceIndices.ULF],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z U'\",\r\n            algorithm: \"R U R' U' R U R' U' R U R' U' R U R' U' R U R' U'\",\r\n            activeStickers: [...pieceIndices.cross, ...pieceIndices.ULF],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z U' R U R' U' R U R' U' R U R' U'\",\r\n            algorithm: \"R U R' U' R U R' U'\",\r\n            activeStickers: [...pieceIndices.cross, ...pieceIndices.ULF],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z R U' R' R' U U R B' U' B L' U' L U L' U' L\",\r\n            algorithm: \"U\",\r\n            activeStickers: [...pieceIndices.firstLayer, ...pieceIndices.FR],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z R U' R' R' U U R B' U' B L' U' L U L' U' L U\",\r\n            algorithm: \"U' L' U L y' U R U' R'\",\r\n            activeStickers: [...pieceIndices.firstLayer, ...pieceIndices.FR],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"D D R R D' F F L L R R U B B F F U' R R U' L F' D L D D F' U U L B' U U L' U U L F' z z R U' R' R' U U R B' U' B F U' F' U F U' F'\",\r\n            algorithm: \"U R U' R' y U' L' U L\",\r\n            activeStickers: [...pieceIndices.firstLayer, ...pieceIndices.FL],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z R' L L F F L L F' L L F' L L F' R U F R U' R' F'\",\r\n            algorithm: \"F R U R' U' F'\",\r\n            activeStickers: [...pieceIndices.f2l, ...pieceIndices.layer3Edges],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z L L F D D B' R R B D D B' F' U U R' U R U B U L L U\",\r\n            algorithm: \"F U R U' R' F'\",\r\n            activeStickers: [...pieceIndices.f2l, ...pieceIndices.layer3Edges],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z B' L L F' D F' D R F' D D L L B' R R U U L L D D F F L L\",\r\n            algorithm: \"F R U R' U' F' U U F U R U' R' F'\",\r\n            activeStickers: [...pieceIndices.f2l, ...pieceIndices.layer3Edges],\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z R U R' U' D R R U' R U' R' U R' U R R D' R U U R' U' R U' R'\",\r\n            algorithm: \"R U R' U R U U R'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z R U R' U' D R R U' R U' R' U R' U R R D' R U R' U R U U R' U U\",\r\n            algorithm: \"R U R' U R U U R' U U R U R' U R U U R'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z R U R' U' D R R U' R U' R' U R' U R R D' F R' F' L F R F' L'\",\r\n            algorithm: \"R U R' U R U U R' U R U R' U R U U R' U U R U R' U R U U R'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z R U R' U' D R R U' R U' R' U R' U R R D' U'\",\r\n            algorithm: \"U R U R' F' R U R' U' R' F R R U' R'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z F R U' R' U' R U R' F' R U R' U' R' F R F'\",\r\n            algorithm: \"R U R' F' R U R' U' R' F R R U' R'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z M M U' M' U U M U' M M\",\r\n            algorithm: \"U U U U M' M' U M' U U M U M' M'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n        {\r\n            setup: \"z z M M U M M U U M M U M M\",\r\n            algorithm: \"U U U U M' M' U M' U U M U M' M'\",\r\n            activeStickers: pieceIndices.allPieces,\r\n            move: 0,\r\n        },\r\n    ];\r\n\r\n    function renderLesson(i: number) {\r\n        const scene = newScene(`#scene${i}`);\r\n        const cube = scene.cube;\r\n        lessons[i].cube = cube;\r\n\r\n        const lesson = lessons[i];\r\n\r\n        const colors = Array(54); // hardcoded because we are using a 3x3x3 cube\r\n\r\n        // Fill in the active stickers with bright colors\r\n        let brights = [_colors.WHITE, _colors.GREEN, _colors.YELLOW, _colors.BLUE, _colors.ORANGE, _colors.RED];\r\n        lesson.activeStickers.forEach(i => {\r\n            colors[i] = brights[Math.floor(i / 9)];\r\n        });\r\n\r\n        // Fill in the rest with dull colors\r\n        let dulls = [_colors.GRAY, _colors.DULL_GREEN, _colors.DULL_YELLOW, _colors.DULL_BLUE, _colors.DULL_ORANGE, _colors.DULL_ORANGE];\r\n        for (let i = 0; i < 54; i++) {\r\n            if (colors[i]) continue;\r\n            colors[i] = dulls[Math.floor(i / 9)];\r\n        }\r\n\r\n        cube.setColors(colors);\r\n\r\n        updateMoveCounter(i);\r\n\r\n        const setup = lesson.setup;\r\n        cube.execAlg(setup);\r\n        cube.commitStickers();\r\n    }\r\n\r\n    const lessonNavigator: HTMLElement = document.querySelector(\"#lessonNavigator\");\r\n\r\n    lessonNavigator.addEventListener(\"click\", (event) => {\r\n        const target = event.target as HTMLElement;\r\n        if (target.className === \"lesson-p\") {\r\n            const lessonIndex = parseInt(target.getAttribute(\"lesson-index\"));\r\n            renderLesson(lessonIndex);\r\n            if (document.documentElement.clientWidth < slide.NARROW) {\r\n                slide.close(lessonNavigator);\r\n            }\r\n        }\r\n    });\r\n\r\n    function updateMoveCounter(lessonIndex: number) {\r\n        const lesson = lessons[lessonIndex];\r\n        const moveCounter = document.querySelector(`#moveCounter${lessonIndex}`);\r\n        const parsedAlg = parseMovesFromAlg(lesson.algorithm);\r\n        moveCounter.textContent = `${lesson.move} / ${parsedAlg.length}`;\r\n    }\r\n\r\n    for (let i = 0; i < lessons.length; i++) {\r\n        renderLesson(i);\r\n    }\r\n\r\n    startLoop();\r\n\r\n    document.addEventListener(\"click\", (event) => {\r\n        const target = event.target as HTMLElement;\r\n        if (target.id.startsWith(\"leftButton\")) {\r\n            // take the number after 'leftButton'\r\n            const lessonIndex = parseInt(target.id.substring(10));\r\n            const lesson = lessons[lessonIndex];\r\n\r\n            if (lesson.move <= 0) return;\r\n\r\n            lesson.move--;\r\n            const moves = parseMovesFromAlg(lesson.algorithm);\r\n            lesson.cube.stepAlgorithm(moves[lesson.move], false);\r\n            updateMoveCounter(lessonIndex);\r\n        } else if (target.id.startsWith(\"rightButton\")) {\r\n            // take the number after 'rightButton'\r\n            const lessonIndex = parseInt(target.id.substring(11));\r\n            const lesson = lessons[lessonIndex];\r\n\r\n            const moves = parseMovesFromAlg(lesson.algorithm);\r\n            if (lesson.move >= moves.length) return;\r\n\r\n            lesson.cube.stepAlgorithm(moves[lesson.move], true);\r\n\r\n            lesson.move++;\r\n            updateMoveCounter(lessonIndex);\r\n        }\r\n    });\r\n\r\n    document.querySelector(\"#openClose\").addEventListener(\"click\", (event) => {\r\n        slide.toggle(lessonNavigator);\r\n    });\r\n\r\n    renderBasedOnWidth();\r\n}\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    renderBasedOnWidth();\r\n});\r\n\r\nfunction renderBasedOnWidth() {\r\n    const openClose: HTMLElement = document.querySelector(\"#openClose\");\r\n    const drawerEle: HTMLElement = document.querySelector(\"#lessonNavigator\");\r\n\r\n    if (document.documentElement.clientWidth < slide.NARROW) {\r\n        openClose.style.display = \"inline-block\";\r\n        slide.close(drawerEle);\r\n        return;\r\n    }\r\n    openClose.style.display = \"none\";\r\n    slide.open(drawerEle);\r\n}\r\n\r\nmain();"],
  "mappings": "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",
  "names": ["gl", "showBody", "a", "i", "corners", "canvas", "offsetSelection", "f", "gl", "gl", "programInfo", "i", "open", "i"]
}
